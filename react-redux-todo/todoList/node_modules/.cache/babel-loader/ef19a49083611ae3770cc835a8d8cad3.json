{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: [],\n  filter: 'All',\n  item: '',\n  id: 0,\n  value: ''\n};\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    // test: (state, data) => {\n    //   return {\n    //     ...state,\n    //     count: state.count,\n    //     templ: state.templ\n    //   };\n    // },\n    // /**\n    //  * text: string;\n    //  */\n    add: (state = initialState, {\n      payload\n    }) => {\n      // todo implement function for add new todo into list\n      const todo = {\n        checked: false,\n        id: Math.random().toFixed(3)\n      };\n      let text = state.value;\n      console.log(text);\n      return { ...state,\n        todos: [{ ...todo,\n          text\n        }, ...state.todos]\n      };\n    },\n    handleChange: (state = initialState, {\n      payload\n    }) => {\n      return { ...state,\n        value: payload\n      };\n    },\n    remove: (state, {\n      payload\n    }) => {\n      // todo implement function for remove todo from the list\n      console.log(state);\n      const newTodos = state.todos.filter(item => item.id !== state.id);\n      return { ...state,\n        todos: newTodos\n      };\n    },\n    markAsChecked: (state, {\n      payload\n    }) => {\n      // todo implement function for mark task checked by id\n      const todoIndex = state.todos.findIndex(item => item.id === state.id);\n      const todo = state.todos;\n      todo[todoIndex].checked = !todo[todoIndex].checked;\n      return {\n        todos: [...state.todos]\n      };\n    },\n    clearCompleted: state => {\n      //todo implement funciton for remove all completed (checked ) tasks\n      const completed = state.todos.filter(item => !item.checked);\n      return {\n        todos: completed\n      };\n    },\n    checkAll: state => {\n      const checkAll = state.todos.every(item => item.checked);\n      const unCheckAll = state.todos.every(item => !item.checked);\n      let completeTodos;\n\n      const mapAllTodos = checkStatus => {\n        completeTodos = state.todos.map(item => {\n          item.checked = checkStatus ? !item.checked : true;\n          return item;\n        });\n      };\n\n      if (checkAll || unCheckAll) {\n        mapAllTodos(true);\n      } else {\n        mapAllTodos(false);\n      }\n\n      return {\n        todos: completeTodos\n      };\n    }\n  }\n});\nexport const actions = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["/home/user/work/react-redux-todo/todoList/src/app/Containers/TodoList/todoSlice.js"],"names":["createSlice","initialState","todos","filter","item","id","value","todoSlice","name","reducers","add","state","payload","todo","checked","Math","random","toFixed","text","console","log","handleChange","remove","newTodos","markAsChecked","todoIndex","findIndex","clearCompleted","completed","checkAll","every","unCheckAll","completeTodos","mapAllTodos","checkStatus","map","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\n\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: [],\n  filter: 'All',\n  item: '',\n  id: 0,\n  value: ''\n};\n\n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n\n    // test: (state, data) => {\n\n    //   return {\n    //     ...state,\n    //     count: state.count,\n    //     templ: state.templ\n    //   };\n    // },\n    // /**\n    //  * text: string;\n    //  */\n    add: (state = initialState, {payload}) => {  // todo implement function for add new todo into list\n        const todo = {\n         checked: false,\n         id: (Math.random()).toFixed(3), \n        }\n\n        let text = state.value;\n        console.log(text);\n      return {\n        ...state,\n        todos: [{...todo, text}, ...state.todos]\n      };\n    },\n\n    handleChange: (state = initialState, {payload}) => {\n      \n    return {\n      ...state,\n      value: payload\n     };\n    },\n\n    remove: (state, {payload}) => {  // todo implement function for remove todo from the list\nconsole.log(state);\n      const newTodos =  state.todos.filter(item => item.id !== state.id);\n      \n        return {\n          ...state,\n          todos: newTodos\n        };\n    },\n\n    markAsChecked: (state, {payload}) => {  // todo implement function for mark task checked by id\n\n      const todoIndex = state.todos.findIndex(item => item.id === state.id)\n      const todo = state.todos;\n      \n      todo[todoIndex].checked = !todo[todoIndex].checked;\n      \n        return {\n          todos: [...state.todos]\n        };\n    },\n\n    clearCompleted: state => {  //todo implement funciton for remove all completed (checked ) tasks\n       const completed = state.todos.filter(item => !item.checked);\n      \n        return {\n          todos: completed\n        };    \n    },\n\n    checkAll: state => {\n        const checkAll = state.todos.every(item => item.checked);\n        const unCheckAll = state.todos.every(item => !item.checked);\n      \n        let completeTodos;\n      \n        const mapAllTodos = (checkStatus) => {\n          completeTodos = state.todos.map(item => {\n            item.checked = checkStatus ? !item.checked : true;\n            return item;\n           });\n          }\n      \n        if (checkAll || unCheckAll) {\n           mapAllTodos(true);\n         } else {\n           mapAllTodos(false);\n        }\n      \n        return {\n          todos: completeTodos\n        }; \n    }\n  }  \n});\n\n\nexport const actions = todoSlice.actions;\n\n\nexport default todoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}