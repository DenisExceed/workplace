{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: [],\n  filter: 'All',\n  item: '',\n  id: Math.random().toFixed(3)\n};\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    // test: (state, data) => {\n    //   return {\n    //     ...state,\n    //     count: state.count,\n    //     templ: state.templ\n    //   };\n    // },\n    // /**\n    //  * text: string;\n    //  */\n    add: (state = initialState, action) => {\n      // todo implement function for add new todo into list\n      console.log(state.todoSlice);\n      const todo = {\n        checked: false,\n        id: state.id\n      };\n      return { ...state,\n        todos: [{ ...todo\n        }, ...this.state.todos]\n      };\n    },\n    remove: (state, action) => {\n      // todo implement function for remove todo from the list\n      const newTodos = this.state.todos.filter(item => item.id !== state.id);\n      return { ...state,\n        todos: newTodos\n      };\n    },\n    markAsChecked: (state, action) => {\n      // todo implement function for mark task checked by id\n      const todoIndex = this.state.todos.findIndex(item => item.id === state.id);\n      const todo = this.state.todos;\n      todo[todoIndex].checked = !todo[todoIndex].checked;\n      return {\n        todos: [...this.state.todos]\n      };\n    },\n    clearCompleted: state => {\n      //todo implement funciton for remove all completed (checked ) tasks\n      const completed = this.state.todos.filter(item => !item.checked);\n      return {\n        todos: completed\n      };\n    },\n    checkAll: state => {\n      const checkAll = this.state.todos.every(item => item.checked);\n      const unCheckAll = this.state.todos.every(item => !item.checked);\n      let completeTodos;\n\n      const mapAllTodos = checkStatus => {\n        completeTodos = this.state.todos.map(item => {\n          item.checked = checkStatus ? !item.checked : true;\n          return item;\n        });\n      };\n\n      if (checkAll || unCheckAll) {\n        mapAllTodos(true);\n      } else {\n        mapAllTodos(false);\n      }\n\n      return {\n        todos: completeTodos\n      };\n    }\n  }\n});\nexport const actions = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["/home/user/work/react-redux-todo/todoList/src/app/Containers/TodoList/todoSlice.js"],"names":["createSlice","initialState","todos","filter","item","id","Math","random","toFixed","todoSlice","name","reducers","add","state","action","console","log","todo","checked","remove","newTodos","markAsChecked","todoIndex","findIndex","clearCompleted","completed","checkAll","every","unCheckAll","completeTodos","mapAllTodos","checkStatus","map","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\n\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: [],\n  filter: 'All',\n  item: '',\n  id: (Math.random()).toFixed(3)\n};\n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n\n    // test: (state, data) => {\n\n    //   return {\n    //     ...state,\n    //     count: state.count,\n    //     templ: state.templ\n    //   };\n    // },\n    // /**\n    //  * text: string;\n    //  */\n    add: (state = initialState, action) => {  // todo implement function for add new todo into list\n      console.log(state.todoSlice);\n\n        const todo = {\n         checked: false,\n         id: state.id, \n        }\n      return {\n        ...state,\n        todos: [{...todo}, ...this.state.todos]\n      };\n    },\n\n    remove: (state, action) => {  // todo implement function for remove todo from the list\n\n      const newTodos =  this.state.todos.filter(item => item.id !== state.id);\n      \n        return {\n          ...state,\n          todos: newTodos\n        };\n    },\n\n    markAsChecked: (state, action) => {  // todo implement function for mark task checked by id\n\n      const todoIndex = this.state.todos.findIndex(item => item.id === state.id)\n      const todo = this.state.todos;\n      \n      todo[todoIndex].checked = !todo[todoIndex].checked;\n      \n        return {\n          todos: [...this.state.todos]\n        };\n    },\n\n    clearCompleted: state => {  //todo implement funciton for remove all completed (checked ) tasks\n       const completed = this.state.todos.filter(item => !item.checked);\n      \n        return {\n          todos: completed\n        };    \n    },\n\n    checkAll: state => {\n        const checkAll = this.state.todos.every(item => item.checked);\n        const unCheckAll = this.state.todos.every(item => !item.checked);\n      \n        let completeTodos;\n      \n        const mapAllTodos = (checkStatus) => {\n          completeTodos = this.state.todos.map(item => {\n            item.checked = checkStatus ? !item.checked : true;\n            return item;\n           });\n          }\n      \n        if (checkAll || unCheckAll) {\n           mapAllTodos(true);\n         } else {\n           mapAllTodos(false);\n        }\n      \n        return {\n          todos: completeTodos\n        }; \n    }\n  }  \n});\n\n\nexport const actions = todoSlice.actions;\n\n\nexport default todoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}