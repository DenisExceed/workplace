{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: [],\n  filter: 'All',\n  item: '',\n  id: 0,\n  value: '',\n  checked\n};\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    // test: (state, data) => {\n    //   return {\n    //     ...state,\n    //     count: state.count,\n    //     templ: state.templ\n    //   };\n    // },\n    // /**\n    //  * text: string;\n    //  */\n    handleChange: (state = initialState, {\n      payload\n    }) => {\n      return { ...state,\n        value: payload\n      };\n    },\n    add: (state = initialState, {\n      payload\n    }) => {\n      // todo implement function for add new todo into list\n      const todo = {\n        id: Math.random().toFixed(3),\n        checked: false\n      };\n      let text = state.value;\n      return { ...state,\n        todos: [{ ...todo,\n          text\n        }, ...state.todos]\n      };\n    },\n    remove: (state = initialState, {\n      payload\n    }) => {\n      // todo implement function for remove todo from the list\n      const id = payload;\n      const newTodos = state.todos.filter(item => item.id !== id);\n      return { ...state,\n        todos: newTodos\n      };\n    },\n    markAsChecked: (state = initialState, {\n      payload\n    }) => {\n      // todo implement function for mark task checked by id\n      const id = payload;\n      const todoIndex = state.todos.findIndex(item => item.id === id);\n      const todo = state.todos;\n      todo[todoIndex].checked = !todo[todoIndex].checked;\n      return {\n        todos: [...state.todos]\n      };\n    },\n    clearCompleted: state => {\n      //todo implement funciton for remove all completed (checked ) tasks\n      const completed = state.todos.filter(item => !item.checked);\n      return {\n        todos: completed\n      };\n    },\n    checkAll: state => {\n      const checkAll = state.todos.every(item => item.checked);\n      const unCheckAll = state.todos.every(item => !item.checked);\n      let completeTodos;\n\n      const mapAllTodos = checkStatus => {\n        completeTodos = state.todos.map(item => {\n          item.checked = checkStatus ? !item.checked : true;\n          return item;\n        });\n      };\n\n      if (checkAll || unCheckAll) {\n        mapAllTodos(true);\n      } else {\n        mapAllTodos(false);\n      }\n\n      return {\n        todos: completeTodos\n      };\n    }\n  }\n});\nexport const actions = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["/home/user/work/react-redux-todo/todoList/src/app/Containers/TodoList/todoSlice.js"],"names":["createSlice","initialState","todos","filter","item","id","value","checked","todoSlice","name","reducers","handleChange","state","payload","add","todo","Math","random","toFixed","text","remove","newTodos","markAsChecked","todoIndex","findIndex","clearCompleted","completed","checkAll","every","unCheckAll","completeTodos","mapAllTodos","checkStatus","map","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\n\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: [],\n  filter: 'All',\n  item: '',\n  id: 0,\n  value: '',\n  checked\n};\n\n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n\n    // test: (state, data) => {\n\n    //   return {\n    //     ...state,\n    //     count: state.count,\n    //     templ: state.templ\n    //   };\n    // },\n    // /**\n    //  * text: string;\n    //  */\n    handleChange: (state = initialState, {payload}) => {\n      \n      return {\n        ...state,\n        value: payload\n      };\n    },\n\n    add: (state = initialState, {payload}) => {  // todo implement function for add new todo into list\n        const todo = {\n         id: (Math.random()).toFixed(3),\n         checked: false \n        }\n        let text = state.value;\n\n      return {\n        ...state,\n        todos: [{...todo, text}, ...state.todos]\n      };\n    },\n\n    remove: (state = initialState, {payload}) => {  // todo implement function for remove todo from the list\n\n      const id = payload;\n      const newTodos =  state.todos.filter(item => item.id !== id);\n      \n        return {\n          ...state,\n          todos: newTodos\n        };\n    },\n\n    markAsChecked: (state = initialState, {payload}) => {  // todo implement function for mark task checked by id\n\n      const id = payload;\n      const todoIndex = state.todos.findIndex(item => item.id === id);\n      const todo = state.todos;\n      \n      todo[todoIndex].checked = !todo[todoIndex].checked;\n      \n        return {\n          todos: [...state.todos]\n        };\n    },\n\n    clearCompleted: state => {  //todo implement funciton for remove all completed (checked ) tasks\n       const completed = state.todos.filter(item => !item.checked);\n      \n        return {\n          todos: completed\n        };    \n    },\n\n    checkAll: state => {\n        const checkAll = state.todos.every(item => item.checked);\n        const unCheckAll = state.todos.every(item => !item.checked);\n      \n        let completeTodos;\n      \n        const mapAllTodos = (checkStatus) => {\n          completeTodos = state.todos.map(item => {\n            item.checked = checkStatus ? !item.checked : true;\n            return item;\n           });\n          }\n      \n        if (checkAll || unCheckAll) {\n           mapAllTodos(true);\n         } else {\n           mapAllTodos(false);\n        }\n      \n        return {\n          todos: completeTodos\n        }; \n    }\n  }  \n});\n\n\nexport const actions = todoSlice.actions;\n\n\nexport default todoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}