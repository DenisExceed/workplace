{"ast":null,"code":"// import { createSlice } from '@reduxjs/toolkit';\n// export const initialState = {\n//   // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n//   todos: [],\n//   filter: 'All',\n//   item: '',\n//   id: 0,\n//   value: ''\n// };\n// export const todoSlice = createSlice({\n//   name: 'todo',\n//   initialState,\n//   reducers: {\n//     // test: (state, data) => {\n//     //   return {\n//     //     ...state,\n//     //     count: state.count,\n//     //     templ: state.templ\n//     //   };\n//     // },\n//     // /**\n//     //  * text: string;\n//     //  */\n//     add: (state = initialState, {payload}) => {  // todo implement function for add new todo into list\n//         const todo = {\n//          checked: false,\n//          id: (Math.random()).toFixed(3),\n//          value: state.value \n//         }\n//       return {\n//         ...state,\n//         todos: [{...todo}, ...state.todos]\n//       };\n//     },\n//     changeInput: (state = initialState, {payload}) => {\n//     return {\n//       ...state,\n//       value: payload\n//      };\n//     },\n//     remove: (state, {payload}) => {  // todo implement function for remove todo from the list\n//       const newTodos =  state.todos.filter(item => item.id !== state.id);\n//         return {\n//           ...state,\n//           todos: newTodos\n//         };\n//     },\n//     markAsChecked: (state, {payload}) => {  // todo implement function for mark task checked by id\n//       const todoIndex = state.todos.findIndex(item => item.id === state.id)\n//       const todo = state.todos;\n//       todo[todoIndex].checked = !todo[todoIndex].checked;\n//         return {\n//           todos: [...state.todos]\n//         };\n//     },\n//     clearCompleted: state => {  //todo implement funciton for remove all completed (checked ) tasks\n//        const completed = state.todos.filter(item => !item.checked);\n//         return {\n//           todos: completed\n//         };    \n//     },\n//     checkAll: state => {\n//         const checkAll = state.todos.every(item => item.checked);\n//         const unCheckAll = state.todos.every(item => !item.checked);\n//         let completeTodos;\n//         const mapAllTodos = (checkStatus) => {\n//           completeTodos = state.todos.map(item => {\n//             item.checked = checkStatus ? !item.checked : true;\n//             return item;\n//            });\n//           }\n//         if (checkAll || unCheckAll) {\n//            mapAllTodos(true);\n//          } else {\n//            mapAllTodos(false);\n//         }\n//         return {\n//           todos: completeTodos\n//         }; \n//     }\n//   }  \n// });\n// export const actions = todoSlice.actions;\n// export default todoSlice.reducer;","map":{"version":3,"sources":["/home/user/work/react-redux-todo/todoList/src/app/Containers/TodoList/todoSlice.js"],"names":[],"mappings":"AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA","sourcesContent":["// import { createSlice } from '@reduxjs/toolkit';\n\n\n// export const initialState = {\n//   // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n//   todos: [],\n//   filter: 'All',\n//   item: '',\n//   id: 0,\n//   value: ''\n// };\n\n\n// export const todoSlice = createSlice({\n//   name: 'todo',\n//   initialState,\n//   reducers: {\n\n//     // test: (state, data) => {\n\n//     //   return {\n//     //     ...state,\n//     //     count: state.count,\n//     //     templ: state.templ\n//     //   };\n//     // },\n//     // /**\n//     //  * text: string;\n//     //  */\n//     add: (state = initialState, {payload}) => {  // todo implement function for add new todo into list\n\n//         const todo = {\n//          checked: false,\n//          id: (Math.random()).toFixed(3),\n//          value: state.value \n//         }\n//       return {\n//         ...state,\n//         todos: [{...todo}, ...state.todos]\n//       };\n//     },\n\n//     changeInput: (state = initialState, {payload}) => {\n\n//     return {\n//       ...state,\n//       value: payload\n//      };\n//     },\n\n//     remove: (state, {payload}) => {  // todo implement function for remove todo from the list\n\n//       const newTodos =  state.todos.filter(item => item.id !== state.id);\n      \n//         return {\n//           ...state,\n//           todos: newTodos\n//         };\n//     },\n\n//     markAsChecked: (state, {payload}) => {  // todo implement function for mark task checked by id\n\n//       const todoIndex = state.todos.findIndex(item => item.id === state.id)\n//       const todo = state.todos;\n      \n//       todo[todoIndex].checked = !todo[todoIndex].checked;\n      \n//         return {\n//           todos: [...state.todos]\n//         };\n//     },\n\n//     clearCompleted: state => {  //todo implement funciton for remove all completed (checked ) tasks\n//        const completed = state.todos.filter(item => !item.checked);\n      \n//         return {\n//           todos: completed\n//         };    \n//     },\n\n//     checkAll: state => {\n//         const checkAll = state.todos.every(item => item.checked);\n//         const unCheckAll = state.todos.every(item => !item.checked);\n      \n//         let completeTodos;\n      \n//         const mapAllTodos = (checkStatus) => {\n//           completeTodos = state.todos.map(item => {\n//             item.checked = checkStatus ? !item.checked : true;\n//             return item;\n//            });\n//           }\n      \n//         if (checkAll || unCheckAll) {\n//            mapAllTodos(true);\n//          } else {\n//            mapAllTodos(false);\n//         }\n      \n//         return {\n//           todos: completeTodos\n//         }; \n//     }\n//   }  \n// });\n\n\n// export const actions = todoSlice.actions;\n\n\n// export default todoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}