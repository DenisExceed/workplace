{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: [],\n  filter: 'All',\n  item: '',\n  id: 0,\n  value: ''\n};\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    // test: (state, data) => {\n    //   return {\n    //     ...state,\n    //     count: state.count,\n    //     templ: state.templ\n    //   };\n    // },\n    // /**\n    //  * text: string;\n    //  */\n    add: (state = initialState, action) => {\n      // todo implement function for add new todo into list\n      const todo = {\n        checked: false,\n        id: Math.random().toFixed(3),\n        value: state.value\n      };\n      return { ...state,\n        todos: [{ ...todo\n        }, ...state.todos]\n      };\n    },\n    handleChange: (state = initialState, action) => {\n      console.log(state, action, \"test\");\n      return { ...state,\n        value: actions.payload\n      };\n    },\n    //   handleSubmit = (event) => {\n    //     if (event.target.value === '') {\n    //         return;\n    //     }\n    //     if (event.key === 'Enter') {\n    //       event.preventDefault();\n    //       this.props.create(this.state.value);\n    //       event.target.value = '';\n    //     }\n    //     if (event.type === 'click') {\n    //       this.props.create(this.state.value);\n    //       document.getElementById('input').value = '';\n    //     }\n    // }\n    remove: (state, action) => {\n      // todo implement function for remove todo from the list\n      const newTodos = state.todos.filter(item => item.id !== state.id);\n      return { ...state,\n        todos: newTodos\n      };\n    },\n    markAsChecked: (state, action) => {\n      // todo implement function for mark task checked by id\n      const todoIndex = state.todos.findIndex(item => item.id === state.id);\n      const todo = state.todos;\n      todo[todoIndex].checked = !todo[todoIndex].checked;\n      return {\n        todos: [...state.todos]\n      };\n    },\n    clearCompleted: state => {\n      //todo implement funciton for remove all completed (checked ) tasks\n      const completed = state.todos.filter(item => !item.checked);\n      return {\n        todos: completed\n      };\n    },\n    checkAll: state => {\n      const checkAll = state.todos.every(item => item.checked);\n      const unCheckAll = state.todos.every(item => !item.checked);\n      let completeTodos;\n\n      const mapAllTodos = checkStatus => {\n        completeTodos = state.todos.map(item => {\n          item.checked = checkStatus ? !item.checked : true;\n          return item;\n        });\n      };\n\n      if (checkAll || unCheckAll) {\n        mapAllTodos(true);\n      } else {\n        mapAllTodos(false);\n      }\n\n      return {\n        todos: completeTodos\n      };\n    }\n  }\n});\nexport const actions = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["/home/user/work/react-redux-todo/todoList/src/app/Containers/TodoList/todoSlice.js"],"names":["createSlice","initialState","todos","filter","item","id","value","todoSlice","name","reducers","add","state","action","todo","checked","Math","random","toFixed","handleChange","console","log","actions","payload","remove","newTodos","markAsChecked","todoIndex","findIndex","clearCompleted","completed","checkAll","every","unCheckAll","completeTodos","mapAllTodos","checkStatus","map","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\n\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: [],\n  filter: 'All',\n  item: '',\n  id: 0,\n  value: ''\n};\n\n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n\n    // test: (state, data) => {\n\n    //   return {\n    //     ...state,\n    //     count: state.count,\n    //     templ: state.templ\n    //   };\n    // },\n    // /**\n    //  * text: string;\n    //  */\n    add: (state = initialState, action) => {  // todo implement function for add new todo into list\n\n        const todo = {\n         checked: false,\n         id: (Math.random()).toFixed(3),\n         value: state.value \n        }\n      return {\n        ...state,\n        todos: [{...todo}, ...state.todos]\n      };\n    },\n    handleChange: (state = initialState, action) => {\n      console.log(state, action,\"test\");\n    return {\n      ...state,\n      value: actions.payload\n     };\n    },\n\n  //   handleSubmit = (event) => {\n\n  //     if (event.target.value === '') {\n  //         return;\n  //     }\n\n  //     if (event.key === 'Enter') {\n  //       event.preventDefault();\n  //       this.props.create(this.state.value);\n  //       event.target.value = '';\n  //     }\n\n  //     if (event.type === 'click') {\n  //       this.props.create(this.state.value);\n  //       document.getElementById('input').value = '';\n  //     }\n\n  // }\n\n    remove: (state, action) => {  // todo implement function for remove todo from the list\n\n      const newTodos =  state.todos.filter(item => item.id !== state.id);\n      \n        return {\n          ...state,\n          todos: newTodos\n        };\n    },\n\n    markAsChecked: (state, action) => {  // todo implement function for mark task checked by id\n\n      const todoIndex = state.todos.findIndex(item => item.id === state.id)\n      const todo = state.todos;\n      \n      todo[todoIndex].checked = !todo[todoIndex].checked;\n      \n        return {\n          todos: [...state.todos]\n        };\n    },\n\n    clearCompleted: state => {  //todo implement funciton for remove all completed (checked ) tasks\n       const completed = state.todos.filter(item => !item.checked);\n      \n        return {\n          todos: completed\n        };    \n    },\n\n    checkAll: state => {\n        const checkAll = state.todos.every(item => item.checked);\n        const unCheckAll = state.todos.every(item => !item.checked);\n      \n        let completeTodos;\n      \n        const mapAllTodos = (checkStatus) => {\n          completeTodos = state.todos.map(item => {\n            item.checked = checkStatus ? !item.checked : true;\n            return item;\n           });\n          }\n      \n        if (checkAll || unCheckAll) {\n           mapAllTodos(true);\n         } else {\n           mapAllTodos(false);\n        }\n      \n        return {\n          todos: completeTodos\n        }; \n    }\n  }  \n});\n\n\nexport const actions = todoSlice.actions;\n\n\nexport default todoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}