{"ast":null,"code":"/* eslint-disable default-case */\n// import { Subscriptions } from '@material-ui/icons';\nimport { createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: JSON.parse(localStorage.getItem('todos') || []),\n  item: '',\n  id: 0,\n  value: '',\n  status: 'All'\n};\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    handleChange: (state = initialState, {\n      payload\n    }) => {\n      return { ...state,\n        value: payload\n      };\n    },\n    add: (state = initialState, {\n      payload\n    }) => {\n      // todo implement function for add new todo into list\n      if (!state.value.length || state.value === '' || state.value.trim() === '') {\n        return state;\n      }\n\n      const todo = {\n        checked: false,\n        text: state.value\n      }; // let text = state.value;\n      // const newTodos = [{...todo, text}, ...state.todos];\n\n      axios.post('http://localhost:5000', todo).then(data => {}).catch(error => console.log('бля. ошибка!!!', error));\n      localStorage.setItem('todos', JSON.stringify(newTodos));\n      return { ...state,\n        todos: newTodos\n      };\n    },\n    remove: (state = initialState, {\n      payload\n    }) => {\n      // todo implement function for remove todo from the list\n      const id = payload;\n      const newTodos = state.todos.filter(item => item.id !== id);\n      localStorage.setItem('todos', JSON.stringify(newTodos));\n      return { ...state,\n        todos: newTodos\n      };\n    },\n    markAsChecked: (state = initialState, {\n      payload\n    }) => {\n      // todo implement function for mark task checked by id\n      const id = payload;\n      const todos = [...state.todos].map(({ ...item\n      }) => {\n        if (item.id === id) {\n          item.checked = !item.checked;\n        }\n\n        return item;\n      });\n      localStorage.setItem('todos', JSON.stringify(todos));\n      return { ...state,\n        todos: todos\n      };\n    },\n    clearCompleted: state => {\n      //todo implement funciton for remove all completed (checked ) tasks\n      const completed = state.todos.filter(item => !item.checked);\n      localStorage.setItem('todos', JSON.stringify(completed));\n      return { ...state,\n        todos: completed\n      };\n    },\n    checkAll: state => {\n      const status = state.todos.some(item => item.checked);\n\n      const mapAllTodos = checkStatus => {\n        return [...state.todos].map(({ ...item\n        }) => {\n          item.checked = checkStatus;\n          return item;\n        });\n      };\n\n      const todos = mapAllTodos(!status);\n      localStorage.setItem('todos', JSON.stringify(todos));\n      return { ...state,\n        todos: todos\n      };\n    },\n    All: state => {\n      return { ...state,\n        status: 'All'\n      };\n    },\n    ToDo: state => {\n      return { ...state,\n        status: 'Todo'\n      };\n    },\n    Completed: state => {\n      return { ...state,\n        status: 'Completed'\n      };\n    }\n  }\n});\nexport const actions = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["/home/user/work/react-redux-todo/todoList/src/app/Containers/TodoList/todoSlice.js"],"names":["createSlice","axios","initialState","todos","JSON","parse","localStorage","getItem","item","id","value","status","todoSlice","name","reducers","handleChange","state","payload","add","length","trim","todo","checked","text","post","then","data","catch","error","console","log","setItem","stringify","newTodos","remove","filter","markAsChecked","map","clearCompleted","completed","checkAll","some","mapAllTodos","checkStatus","All","ToDo","Completed","actions","reducer"],"mappings":"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","sourcesContent":["/* eslint-disable default-case */\n// import { Subscriptions } from '@material-ui/icons';\nimport { createSlice } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\n\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: JSON.parse(localStorage.getItem('todos') || []),\n  item: '',\n  id: 0,\n  value: '',\n  status: 'All',\n};\n\n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n\n    handleChange: (state = initialState, {payload}) => {\n\n       return {\n        ...state,\n        value: payload\n      };\n    },\n\n\n    add: (state = initialState, {payload}) => {  // todo implement function for add new todo into list\n\n      if (!state.value.length || state.value === '' || state.value.trim() === '') { return state }\n\n         const todo = {\n          checked: false,\n          text: state.value\n        }\n        // let text = state.value;\n\n        // const newTodos = [{...todo, text}, ...state.todos];\n\n        axios.post('http://localhost:5000', todo).then((data) => {\n          \n          }).catch((error) => console.log('бля. ошибка!!!', error));\n\n        localStorage.setItem('todos', JSON.stringify(newTodos));\n\n      return {\n        ...state,\n        todos: newTodos,\n      };\n    },\n\n    remove: (state = initialState, {payload}) => {  // todo implement function for remove todo from the list\n\n      const id = payload;\n      const newTodos =  state.todos.filter(item => item.id !== id);\n\n      localStorage.setItem('todos', JSON.stringify(newTodos));\n      \n        return {\n          ...state,\n          todos: newTodos,\n        };\n    },\n\n    markAsChecked: (state = initialState, {payload}) => {  // todo implement function for mark task checked by id\n\n      const id = payload;\n      const todos = [...state.todos].map(({...item}) => {\n        if (item.id === id) {\n          item.checked = !item.checked;\n        }\n\n        return item\n      });\n\n      localStorage.setItem('todos', JSON.stringify(todos));\n\n      return {\n        ...state,\n        todos: todos,\n      }\n\n    },\n\n    clearCompleted: (state) => {  //todo implement funciton for remove all completed (checked ) tasks\n       const completed = state.todos.filter(item => !item.checked);\n\n       localStorage.setItem('todos', JSON.stringify(completed));\n      \n        return {\n          ...state,\n          todos: completed,\n        };    \n    },\n\n    checkAll: (state) => {\n\n        const status = state.todos.some(item => item.checked);\n          \n        const mapAllTodos = (checkStatus) => {\n\n          return [...state.todos].map(({...item}) => { \n            item.checked = checkStatus;\n            return item;\n          });\n        }\n\n        const todos = mapAllTodos(!status);\n\n        localStorage.setItem('todos', JSON.stringify(todos));\n\n        return {\n          ...state,\n          todos: todos,\n        };  \n    },\n\n    All: (state) => {\n      return {\n        ...state,\n        status: 'All',\n      };\n    },\n    \n    ToDo: (state) => {\n      return {\n        ...state,\n        status: 'Todo',\n      }; \n    },\n\n    Completed: (state) => {\n      return {\n        ...state,\n        status: 'Completed',\n      };\n    }\n\n  }  \n});\n\n\nexport const actions = todoSlice.actions;\n\nexport default todoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}