{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { SHOW_ALL, SHOW_COMPLETED, SHOW_ACTIVE, ADD, DELETE, MARK_AS_CHECKED } from '../../constants/todo';\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: [],\n  filter: 'All'\n};\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    add: (state, {\n      payload\n    }) => {\n      // todo implement function for add new todo into list\n      let createTodoItem = text => {\n        const todo = {\n          checked: false,\n          id: Math.random().toFixed(3)\n        };\n        this.setState({\n          todos: [{ ...todo,\n            text\n          }, ...this.state.todos]\n        });\n      };\n    },\n    remove: (state, {\n      payload\n    }) => {\n      // todo implement function for remove todo from the list\n      let deleteTodo = id => {\n        const newTodos = this.state.todos.filter(item => item.id !== id);\n        this.setState({\n          todos: newTodos\n        });\n      };\n    },\n    markAsChecked: (state, {\n      payload\n    }) => {\n      // todo implement function for mark task checked by id\n      let completeTodo = id => {\n        const todoIndex = this.state.todos.findIndex(item => item.id === id);\n        const todo = this.state.todos;\n        todo[todoIndex].checked = !todo[todoIndex].checked;\n        this.setState({\n          todos: [...this.state.todos]\n        });\n      };\n    },\n    clearCompleted: state => {\n      //todo implement funciton for remove all completed (checked ) tasks\n      let deleteCompletedTodos = () => {\n        const completed = this.state.todos.filter(item => !item.checked);\n        this.setState({\n          todos: completed\n        });\n      };\n    },\n    checkAll: state => {\n      let completeAllTodos = () => {\n        const checkAll = this.state.todos.every(item => item.checked);\n        const unCheckAll = this.state.todos.every(item => !item.checked);\n        let completeTodos;\n\n        const mapAllTodos = checkStatus => {\n          completeTodos = this.state.todos.map(item => {\n            item.checked = checkStatus ? !item.checked : true;\n            return item;\n          });\n        };\n\n        if (checkAll || unCheckAll) {\n          mapAllTodos(true);\n        } else {\n          mapAllTodos(false);\n        }\n\n        this.setState({\n          todos: completeTodos\n        });\n      };\n    }\n  }\n});\nexport const actions = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["/home/user/work/react-redux-todo/todoList/src/app/Containers/TodoList/todoSlice.js"],"names":["createSlice","SHOW_ALL","SHOW_COMPLETED","SHOW_ACTIVE","ADD","DELETE","MARK_AS_CHECKED","initialState","todos","filter","todoSlice","name","reducers","add","state","payload","createTodoItem","text","todo","checked","id","Math","random","toFixed","setState","remove","deleteTodo","newTodos","item","markAsChecked","completeTodo","todoIndex","findIndex","clearCompleted","deleteCompletedTodos","completed","checkAll","completeAllTodos","every","unCheckAll","completeTodos","mapAllTodos","checkStatus","map","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nimport {\n  SHOW_ALL,\n  SHOW_COMPLETED,\n  SHOW_ACTIVE,\n  ADD,\n  DELETE,\n  MARK_AS_CHECKED\n\n} from '../../constants/todo'\n\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: [],\n  filter: 'All'\n};\n\n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    add: (state, {payload}) => {  // todo implement function for add new todo into list\n      let createTodoItem = (text) => {\n        const todo = {\n         checked: false,\n         id: (Math.random()).toFixed(3), \n        }\n    \n        this.setState ({\n         todos: [{...todo, text}, ...this.state.todos]\n        });\n      }\n    },\n    remove: (state, {payload}) => {  // todo implement function for remove todo from the list\n      let deleteTodo = (id) => {\n        const newTodos =  this.state.todos.filter(item => item.id !== id);\n      \n        this.setState({\n          todos: newTodos\n        });\n      }\n    },\n    markAsChecked: (state, {payload}) => {  // todo implement function for mark task checked by id\n      let completeTodo = (id) => {\n        const todoIndex = this.state.todos.findIndex(item => item.id === id)\n        const todo = this.state.todos;\n        \n        todo[todoIndex].checked = !todo[todoIndex].checked;\n      \n        this.setState({\n          todos: [...this.state.todos]\n        });\n      }\n    },\n    clearCompleted: state => {  //todo implement funciton for remove all completed (checked ) tasks\n      let deleteCompletedTodos = () => {\n        const completed = this.state.todos.filter(item => !item.checked);\n      \n        this.setState({\n          todos: completed\n        });\n      }\n    },\n    checkAll: state => {\n      let completeAllTodos = () => {\n        const checkAll = this.state.todos.every(item => item.checked);\n        const unCheckAll = this.state.todos.every(item => !item.checked);\n      \n        let completeTodos;\n      \n        const mapAllTodos = (checkStatus) => {\n          completeTodos = this.state.todos.map(item => {\n            item.checked = checkStatus ? !item.checked : true;\n            return item;\n           });\n          }\n      \n          if (checkAll || unCheckAll) {\n            mapAllTodos(true);\n          } else {\n            mapAllTodos(false);\n          }\n      \n          this.setState({\n            todos: completeTodos\n          }); \n      }\n    }\n  },\n});\n\n\nexport const actions = todoSlice.actions;\n\n\nexport default todoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}