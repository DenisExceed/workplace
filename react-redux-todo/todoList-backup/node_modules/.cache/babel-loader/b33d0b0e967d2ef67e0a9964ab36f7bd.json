{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: [],\n  filter: 'All',\n  item: ''\n};\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    // test: (state, data) => {\n    //   return {\n    //     ...state,\n    //     count: state.count,\n    //     templ: state.templ\n    //   };\n    // },\n    // /**\n    //  * text: string;\n    //  */\n    add: (state = initialState, action) => {\n      // todo implement function for add new todo into list\n      const todo = {\n        checked: false,\n        id: Math.random().toFixed(2)\n      };\n      return { ...state,\n        todos: [{ ...todo\n        }, ...this.state.todos]\n      };\n    },\n    remove: (state, action) => {\n      // todo implement function for remove todo from the list\n      const newTodos = this.state.todos.filter(item => item.id !== id);\n      return { ...state,\n        todos: newTodos\n      };\n    },\n    markAsChecked: (state, action) => {\n      // todo implement function for mark task checked by id\n      const todoIndex = this.state.todos.findIndex(item => item.id === id);\n      const todo = this.state.todos;\n      todo[todoIndex].checked = !todo[todoIndex].checked;\n      return {\n        todos: [...this.state.todos]\n      };\n    },\n    clearCompleted: state => {\n      //todo implement funciton for remove all completed (checked ) tasks\n      const completed = this.state.todos.filter(item => !item.checked);\n      return {\n        todos: completed\n      };\n    },\n    checkAll: state => {\n      const checkAll = this.state.todos.every(item => item.checked);\n      const unCheckAll = this.state.todos.every(item => !item.checked);\n      let completeTodos;\n\n      const mapAllTodos = checkStatus => {\n        completeTodos = this.state.todos.map(item => {\n          item.checked = checkStatus ? !item.checked : true;\n          return item;\n        });\n      };\n\n      if (checkAll || unCheckAll) {\n        mapAllTodos(true);\n      } else {\n        mapAllTodos(false);\n      }\n\n      return {\n        todos: completeTodos\n      };\n    }\n  }\n});\nexport const actions = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["/home/user/work/react-redux-todo/todoList/src/app/Containers/TodoList/todoSlice.js"],"names":["createSlice","initialState","todos","filter","item","todoSlice","name","reducers","add","state","action","todo","checked","id","Math","random","toFixed","remove","newTodos","markAsChecked","todoIndex","findIndex","clearCompleted","completed","checkAll","every","unCheckAll","completeTodos","mapAllTodos","checkStatus","map","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAGA,OAAO,MAAMC,YAAY,GAAG;AAC1B;AACAC,EAAAA,KAAK,EAAE,EAFmB;AAG1BC,EAAAA,MAAM,EAAE,KAHkB;AAI1BC,EAAAA,IAAI,EAAE;AAJoB,CAArB;AAOP,OAAO,MAAMC,SAAS,GAAGL,WAAW,CAAC;AACnCM,EAAAA,IAAI,EAAE,MAD6B;AAEnCL,EAAAA,YAFmC;AAGnCM,EAAAA,QAAQ,EAAE;AAER;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,GAAG,EAAE,CAACC,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAAkC;AAAG;AACtC,YAAMC,IAAI,GAAG;AACZC,QAAAA,OAAO,EAAE,KADG;AAEZC,QAAAA,EAAE,EAAGC,IAAI,CAACC,MAAL,EAAD,CAAgBC,OAAhB,CAAwB,CAAxB;AAFQ,OAAb;AAIF,aAAO,EACL,GAAGP,KADE;AAELP,QAAAA,KAAK,EAAE,CAAC,EAAC,GAAGS;AAAJ,SAAD,EAAY,GAAG,KAAKF,KAAL,CAAWP,KAA1B;AAFF,OAAP;AAID,KAtBO;AAwBRe,IAAAA,MAAM,EAAE,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAAG;AAE5B,YAAMQ,QAAQ,GAAI,KAAKT,KAAL,CAAWP,KAAX,CAAiBC,MAAjB,CAAwBC,IAAI,IAAIA,IAAI,CAACS,EAAL,KAAYA,EAA5C,CAAlB;AAEE,aAAO,EACL,GAAGJ,KADE;AAELP,QAAAA,KAAK,EAAEgB;AAFF,OAAP;AAIH,KAhCO;AAkCRC,IAAAA,aAAa,EAAE,CAACV,KAAD,EAAQC,MAAR,KAAmB;AAAG;AAEnC,YAAMU,SAAS,GAAG,KAAKX,KAAL,CAAWP,KAAX,CAAiBmB,SAAjB,CAA2BjB,IAAI,IAAIA,IAAI,CAACS,EAAL,KAAYA,EAA/C,CAAlB;AACA,YAAMF,IAAI,GAAG,KAAKF,KAAL,CAAWP,KAAxB;AAEAS,MAAAA,IAAI,CAACS,SAAD,CAAJ,CAAgBR,OAAhB,GAA0B,CAACD,IAAI,CAACS,SAAD,CAAJ,CAAgBR,OAA3C;AAEE,aAAO;AACLV,QAAAA,KAAK,EAAE,CAAC,GAAG,KAAKO,KAAL,CAAWP,KAAf;AADF,OAAP;AAGH,KA5CO;AA8CRoB,IAAAA,cAAc,EAAEb,KAAK,IAAI;AAAG;AACzB,YAAMc,SAAS,GAAG,KAAKd,KAAL,CAAWP,KAAX,CAAiBC,MAAjB,CAAwBC,IAAI,IAAI,CAACA,IAAI,CAACQ,OAAtC,CAAlB;AAEC,aAAO;AACLV,QAAAA,KAAK,EAAEqB;AADF,OAAP;AAGH,KApDO;AAsDRC,IAAAA,QAAQ,EAAEf,KAAK,IAAI;AACf,YAAMe,QAAQ,GAAG,KAAKf,KAAL,CAAWP,KAAX,CAAiBuB,KAAjB,CAAuBrB,IAAI,IAAIA,IAAI,CAACQ,OAApC,CAAjB;AACA,YAAMc,UAAU,GAAG,KAAKjB,KAAL,CAAWP,KAAX,CAAiBuB,KAAjB,CAAuBrB,IAAI,IAAI,CAACA,IAAI,CAACQ,OAArC,CAAnB;AAEA,UAAIe,aAAJ;;AAEA,YAAMC,WAAW,GAAIC,WAAD,IAAiB;AACnCF,QAAAA,aAAa,GAAG,KAAKlB,KAAL,CAAWP,KAAX,CAAiB4B,GAAjB,CAAqB1B,IAAI,IAAI;AAC3CA,UAAAA,IAAI,CAACQ,OAAL,GAAeiB,WAAW,GAAG,CAACzB,IAAI,CAACQ,OAAT,GAAmB,IAA7C;AACA,iBAAOR,IAAP;AACA,SAHc,CAAhB;AAIC,OALH;;AAOA,UAAIoB,QAAQ,IAAIE,UAAhB,EAA4B;AACzBE,QAAAA,WAAW,CAAC,IAAD,CAAX;AACD,OAFF,MAEQ;AACLA,QAAAA,WAAW,CAAC,KAAD,CAAX;AACF;;AAED,aAAO;AACL1B,QAAAA,KAAK,EAAEyB;AADF,OAAP;AAGH;AA5EO;AAHyB,CAAD,CAA7B;AAoFP,OAAO,MAAMI,OAAO,GAAG1B,SAAS,CAAC0B,OAA1B;AAGP,eAAe1B,SAAS,CAAC2B,OAAzB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\n\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: [],\n  filter: 'All',\n  item: ''\n};\n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n\n    // test: (state, data) => {\n\n    //   return {\n    //     ...state,\n    //     count: state.count,\n    //     templ: state.templ\n    //   };\n    // },\n    // /**\n    //  * text: string;\n    //  */\n    add: (state = initialState, action) => {  // todo implement function for add new todo into list\n        const todo = {\n         checked: false,\n         id: (Math.random()).toFixed(2), \n        }\n      return {\n        ...state,\n        todos: [{...todo}, ...this.state.todos]\n      };\n    },\n\n    remove: (state, action) => {  // todo implement function for remove todo from the list\n\n      const newTodos =  this.state.todos.filter(item => item.id !== id);\n      \n        return {\n          ...state,\n          todos: newTodos\n        };\n    },\n\n    markAsChecked: (state, action) => {  // todo implement function for mark task checked by id\n\n      const todoIndex = this.state.todos.findIndex(item => item.id === id)\n      const todo = this.state.todos;\n      \n      todo[todoIndex].checked = !todo[todoIndex].checked;\n      \n        return {\n          todos: [...this.state.todos]\n        };\n    },\n\n    clearCompleted: state => {  //todo implement funciton for remove all completed (checked ) tasks\n       const completed = this.state.todos.filter(item => !item.checked);\n      \n        return {\n          todos: completed\n        };    \n    },\n\n    checkAll: state => {\n        const checkAll = this.state.todos.every(item => item.checked);\n        const unCheckAll = this.state.todos.every(item => !item.checked);\n      \n        let completeTodos;\n      \n        const mapAllTodos = (checkStatus) => {\n          completeTodos = this.state.todos.map(item => {\n            item.checked = checkStatus ? !item.checked : true;\n            return item;\n           });\n          }\n      \n        if (checkAll || unCheckAll) {\n           mapAllTodos(true);\n         } else {\n           mapAllTodos(false);\n        }\n      \n        return {\n          todos: completeTodos\n        }; \n    }\n  }  \n});\n\n\nexport const actions = todoSlice.actions;\n\n\nexport default todoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}