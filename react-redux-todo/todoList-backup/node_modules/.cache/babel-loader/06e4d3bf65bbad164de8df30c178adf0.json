{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: [],\n  filter: 'All',\n  id: Math.random().toFixed(3),\n  checked: false,\n  item: todo\n};\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    // test: (state, data) => {\n    //   return {\n    //     ...state,\n    //     count: state.count,\n    //     templ: state.templ\n    //   };\n    // },\n    // /**\n    //  * text: string;\n    //  */\n    add: (state, action) => {\n      // todo implement function for add new todo into list\n      console.log(state);\n      this.state.push(action.payload);\n      return { ...state,\n        todos: [...state.todos]\n      };\n    }\n  },\n  remove: (state, action) => {\n    // todo implement function for remove todo from the list\n    const newTodos = this.state.todos.filter(item => item.id !== action.payload);\n    return { ...state,\n      todos: newTodos\n    };\n  },\n  markAsChecked: (state, action) => {\n    // todo implement function for mark task checked by id\n    const todoIndex = this.state.todos.findIndex(item => item.id === action.payload);\n    const todo = this.state.todos;\n    todo[todoIndex].checked = !todo[todoIndex].checked;\n    return {\n      todos: [...state.todos]\n    };\n  },\n  clearCompleted: state => {\n    //todo implement funciton for remove all completed (checked ) tasks\n    const completed = this.state.todos.filter(item => !item.checked);\n    return {\n      todos: completed\n    };\n  },\n  checkAll: state => {\n    const checkAll = this.state.todos.every(item => item.checked);\n    const unCheckAll = this.state.todos.every(item => !item.checked);\n    let completeTodos;\n\n    const mapAllTodos = checkStatus => {\n      completeTodos = this.state.todos.map(item => {\n        item.checked = checkStatus ? !item.checked : true;\n        return item;\n      });\n    };\n\n    if (checkAll || unCheckAll) {\n      mapAllTodos(true);\n    } else {\n      mapAllTodos(false);\n    }\n\n    return {\n      todos: completeTodos\n    };\n  }\n});\nexport const actions = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["/home/user/work/react-redux-todo/todoList/src/app/Containers/TodoList/todoSlice.js"],"names":["createSlice","initialState","todos","filter","id","Math","random","toFixed","checked","item","todo","todoSlice","name","reducers","add","state","action","console","log","push","payload","remove","newTodos","markAsChecked","todoIndex","findIndex","clearCompleted","completed","checkAll","every","unCheckAll","completeTodos","mapAllTodos","checkStatus","map","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\n\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: [],\n  filter: 'All',\n  id: (Math.random()).toFixed(3),\n  checked: false,\n  item: todo,\n};\n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n\n    // test: (state, data) => {\n\n    //   return {\n    //     ...state,\n    //     count: state.count,\n    //     templ: state.templ\n    //   };\n    // },\n    // /**\n    //  * text: string;\n    //  */\n    add: (state, action) => {  // todo implement function for add new todo into list\n      console.log(state);\n        this.state.push(action.payload)\n        return {\n          ...state,\n          todos: [...state.todos]\n        };\n      }\n    },\n\n    remove: (state, action) => {  // todo implement function for remove todo from the list\n\n        const newTodos =  this.state.todos.filter(item => item.id !== action.payload);\n      \n        return {\n          ...state,\n          todos: newTodos\n        };\n    },\n\n    markAsChecked: (state, action) => {  // todo implement function for mark task checked by id\n\n        const todoIndex = this.state.todos.findIndex(item => item.id === action.payload)\n        const todo = this.state.todos;\n        \n        todo[todoIndex].checked = !todo[todoIndex].checked;\n      \n        return {\n          todos: [...state.todos]\n        };\n    },\n\n    clearCompleted: state => {  //todo implement funciton for remove all completed (checked ) tasks\n        const completed = this.state.todos.filter(item => !item.checked);\n      \n        return {\n          todos: completed\n        };    \n    },\n\n    checkAll: state => {\n        const checkAll = this.state.todos.every(item => item.checked);\n        const unCheckAll = this.state.todos.every(item => !item.checked);\n      \n        let completeTodos;\n      \n        const mapAllTodos = (checkStatus) => {\n          completeTodos = this.state.todos.map(item => {\n            item.checked = checkStatus ? !item.checked : true;\n            return item;\n           });\n          }\n      \n        if (checkAll || unCheckAll) {\n           mapAllTodos(true);\n         } else {\n           mapAllTodos(false);\n        }\n      \n        return {\n          todos: completeTodos\n        }; \n    }\n});\n\n\nexport const actions = todoSlice.actions;\n\n\nexport default todoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}