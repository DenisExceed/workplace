{"ast":null,"code":"var _jsxFileName = \"/home/user/work/react-redux-todo/todoList/src/app/Components/Footer/Footer.jsx\";\n\n/* eslint-disable default-case */\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport './Footer.scss';\nimport { connect } from 'react-redux';\nimport { actions } from '../../Containers/TodoList/todoSlice';\n\nconst mapStateToProps = state => {\n  return { ...state\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    checkAll: () => dispatch(actions.checkAll()),\n    clearCompleted: () => dispatch(actions.clearCompleted())\n  };\n};\n\nconst numOfCompleted = state => {\n  const completed = state.todoSlice.todos.filter(item => item.checked);\n  return completed.length;\n};\n\nconst numOfNotCompleted = state => {\n  const notCompleted = state.todoSlice.todos.filter(item => item.checked === false);\n  return notCompleted.length;\n};\n\nconst setFilter = filter => {\n  this.setState({\n    filter\n  });\n};\n\nconst setCaseFilter = state => {\n  switch (state.todoSlice.todos.filter) {\n    case 'All':\n      return true;\n\n    case 'ToDo':\n      const completed = state.todoSlice.todos.filter(item => item.checked);\n      return completed.length;\n\n    case 'Completed':\n      return item.checked;\n  }\n};\n\nconst Footer = state => {\n  console.log(state);\n\n  let todoFooter = () => {\n    if (state.todoSlice.todos.length > 0) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"footer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        onClick: state.checkAll,\n        className: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 16\n        }\n      }, numOfNotCompleted(state), \" tasks left\"), /*#__PURE__*/React.createElement(ButtonGroup, {\n        variant: \"text\",\n        color: \"primary\",\n        \"aria-label\": \"text primary button group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 16\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        onClick: () => state.todoSlice.filter('All'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 16\n        }\n      }, \"All\"), /*#__PURE__*/React.createElement(Button, {\n        onClick: () => state.todoSlice.filter('ToDo'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 16\n        }\n      }, \"ToDo\"), /*#__PURE__*/React.createElement(Button, {\n        onClick: () => state.todoSlice.filter('Completed'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 16\n        }\n      }, \"Completed\")), !!numOfCompleted(state) && /*#__PURE__*/React.createElement(Button, {\n        onClick: state.clearCompleted,\n        className: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 44\n        }\n      }, \"Clear completed\"));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"footer\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 6\n    }\n  }, todoFooter());\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Footer);","map":{"version":3,"sources":["/home/user/work/react-redux-todo/todoList/src/app/Components/Footer/Footer.jsx"],"names":["React","Button","ButtonGroup","connect","actions","mapStateToProps","state","mapDispatchToProps","dispatch","checkAll","clearCompleted","numOfCompleted","completed","todoSlice","todos","filter","item","checked","length","numOfNotCompleted","notCompleted","setFilter","setState","setCaseFilter","Footer","console","log","todoFooter"],"mappings":"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","sourcesContent":["/* eslint-disable default-case */\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport './Footer.scss';\nimport { connect } from 'react-redux';\nimport { actions } from '../../Containers/TodoList/todoSlice';\n\nconst mapStateToProps = (state) => {\n  return {\n    ...state\n  };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    checkAll: () => dispatch(actions.checkAll()),\n    clearCompleted: () => dispatch(actions.clearCompleted())\n    };\n};\n\nconst numOfCompleted = (state) => {\n  const completed = state.todoSlice.todos.filter(item => item.checked);\n  return completed.length;\n}\n\nconst numOfNotCompleted = (state) => {\n  const notCompleted = state.todoSlice.todos.filter(item => item.checked === false);\n  return notCompleted.length;\n}\n\n\nconst setFilter = (filter) => {\n  this.setState({filter})\n}\n\nconst setCaseFilter = (state) => {\n  switch(state.todoSlice.todos.filter) {\n\n    case 'All':\n      return true;\n\n    case 'ToDo':\n      const completed = state.todoSlice.todos.filter(item => item.checked);\n      return completed.length;\n      \n    case 'Completed':\n      return item.checked;  \n  }\n}\n\n\n\n\nconst Footer = (state) => {\n  console.log(state);\n\n    let todoFooter = () => {\n\n        if(state.todoSlice.todos.length > 0) {\n\n            return (\n              <div className=\"footer\">\n               <Button onClick={state.checkAll} className=\"small\">{numOfNotCompleted(state)} tasks left</Button>  \n               <ButtonGroup variant=\"text\" color=\"primary\" aria-label=\"text primary button group\">\n               <Button onClick={() => state.todoSlice.filter('All')}>All</Button>\n               <Button onClick={() => state.todoSlice.filter('ToDo')}>ToDo</Button>\n               <Button onClick={() => state.todoSlice.filter('Completed')}>Completed</Button>\n               </ButtonGroup>\n               {!!numOfCompleted(state) && <Button onClick={state.clearCompleted} className=\"small\">Clear completed</Button>}\n              </div>\n            );\n           }\n    }\n  \n    return (\n     <footer>\n         {todoFooter()}\n     </footer>\n    );\n  };\n  \n  export default connect(mapStateToProps, mapDispatchToProps)(Footer);"]},"metadata":{},"sourceType":"module"}