{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: [],\n  filter: 'All'\n};\n\nhandleChange = event => {\n  this.setState({\n    value: event.target.value\n  });\n};\n\nhandleSubmit = event => {\n  if (event.target.value === '') {\n    return;\n  }\n\n  if (event.key === 'Enter') {\n    event.preventDefault();\n    this.props.create(this.state.value);\n    event.target.value = '';\n  }\n\n  if (event.type === 'click') {\n    {\n      this.props.create(this.state.value);\n    }\n    ;\n    document.getElementById('input').value = '';\n  }\n};\n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    add: (state, {\n      payload\n    }) => {\n      // todo implement function for add new todo into list\n      let createTodoItem = text => {\n        const todo = {\n          checked: false,\n          id: Math.random().toFixed(3)\n        };\n        this.setState({\n          todos: [{ ...todo,\n            text\n          }, ...this.state.todos]\n        });\n      };\n    },\n    remove: (state, {\n      payload\n    }) => {\n      // todo implement function for remove todo from the list\n      let deleteTodo = id => {\n        const newTodos = this.state.todos.filter(item => item.id !== id);\n        this.setState({\n          todos: newTodos\n        });\n      };\n    },\n    markAsChecked: (state, {\n      payload\n    }) => {\n      // todo implement function for mark task checked by id\n      let completeTodo = id => {\n        const todoIndex = this.state.todos.findIndex(item => item.id === id);\n        const todo = this.state.todos;\n        todo[todoIndex].checked = !todo[todoIndex].checked;\n        this.setState({\n          todos: [...this.state.todos]\n        });\n      };\n    },\n    clearCompleted: state => {\n      //todo implement funciton for remove all completed (checked ) tasks\n      let deleteCompletedTodos = () => {\n        const completed = this.state.todos.filter(item => !item.checked);\n        this.setState({\n          todos: completed\n        });\n      };\n    },\n    checkAll: state => {\n      let completeAllTodos = () => {\n        const checkAll = this.state.todos.every(item => item.checked);\n        const unCheckAll = this.state.todos.every(item => !item.checked);\n        let completeTodos;\n\n        const mapAllTodos = checkStatus => {\n          completeTodos = this.state.todos.map(item => {\n            item.checked = checkStatus ? !item.checked : true;\n            return item;\n          });\n        };\n\n        if (checkAll || unCheckAll) {\n          mapAllTodos(true);\n        } else {\n          mapAllTodos(false);\n        }\n\n        this.setState({\n          todos: completeTodos\n        });\n      };\n    }\n  }\n});\nexport const actions = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["/home/user/work/react-redux-todo/todoList/src/app/Containers/TodoList/todoSlice.js"],"names":["createSlice","initialState","todos","filter","handleChange","event","setState","value","target","handleSubmit","key","preventDefault","props","create","state","type","document","getElementById","todoSlice","name","reducers","add","payload","createTodoItem","text","todo","checked","id","Math","random","toFixed","remove","deleteTodo","newTodos","item","markAsChecked","completeTodo","todoIndex","findIndex","clearCompleted","deleteCompletedTodos","completed","checkAll","completeAllTodos","every","unCheckAll","completeTodos","mapAllTodos","checkStatus","map","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: [],\n  filter: 'All'\n};\n\nhandleChange = (event) => {\n  this.setState({ value: event.target.value })\n}\n\nhandleSubmit = (event) => {\n\n  if (event.target.value === '') {\n      return;\n  }\n\n  if (event.key === 'Enter') {\n      event.preventDefault();\n      this.props.create(this.state.value);\n      event.target.value = '';\n  }\n\n  if (event.type === 'click') {\n    {this.props.create(this.state.value)};\n    document.getElementById('input').value = '';\n  }\n\n} \n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    add: (state, {payload}) => {  // todo implement function for add new todo into list\n      let createTodoItem = (text) => {\n        const todo = {\n         checked: false,\n         id: (Math.random()).toFixed(3), \n        }\n    \n        this.setState ({\n         todos: [{...todo, text}, ...this.state.todos]\n        });\n      }\n    },\n    remove: (state, {payload}) => {  // todo implement function for remove todo from the list\n      let deleteTodo = (id) => {\n        const newTodos =  this.state.todos.filter(item => item.id !== id);\n      \n        this.setState({\n          todos: newTodos\n        });\n      }\n    },\n    markAsChecked: (state, {payload}) => {  // todo implement function for mark task checked by id\n      let completeTodo = (id) => {\n        const todoIndex = this.state.todos.findIndex(item => item.id === id)\n        const todo = this.state.todos;\n        \n        todo[todoIndex].checked = !todo[todoIndex].checked;\n      \n        this.setState({\n          todos: [...this.state.todos]\n        });\n      }\n    },\n    clearCompleted: state => {  //todo implement funciton for remove all completed (checked ) tasks\n      let deleteCompletedTodos = () => {\n        const completed = this.state.todos.filter(item => !item.checked);\n      \n        this.setState({\n          todos: completed\n        });\n      }\n    },\n    checkAll: state => {\n      let completeAllTodos = () => {\n        const checkAll = this.state.todos.every(item => item.checked);\n        const unCheckAll = this.state.todos.every(item => !item.checked);\n      \n        let completeTodos;\n      \n        const mapAllTodos = (checkStatus) => {\n          completeTodos = this.state.todos.map(item => {\n            item.checked = checkStatus ? !item.checked : true;\n            return item;\n           });\n          }\n      \n          if (checkAll || unCheckAll) {\n            mapAllTodos(true);\n          } else {\n            mapAllTodos(false);\n          }\n      \n          this.setState({\n            todos: completeTodos\n          }); \n      }\n    }\n  },\n});\n\n\nexport const actions = todoSlice.actions;\n\n\nexport default todoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}