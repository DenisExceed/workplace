{"ast":null,"code":"/* eslint-disable default-case */\nimport { Subscriptions } from '@material-ui/icons';\nimport { createSlice } from '@reduxjs/toolkit';\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: [],\n  originalTodos: [],\n  item: '',\n  id: 0,\n  value: '',\n  checked: false\n};\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  hydrate: (state, action) => {\n    // do not do state = action.payload it will not update the store\n    return action.payload;\n  },\n  reducers: {\n    handleChange: (state = initialState, {\n      payload\n    }) => {\n      return { ...state,\n        value: payload\n      };\n    },\n    add: (state = initialState, {\n      payload\n    }) => {\n      // todo implement function for add new todo into list\n      const todo = {\n        id: Math.random().toFixed(3),\n        checked: false\n      };\n      let text = state.value;\n      return { ...state,\n        todos: [{ ...todo,\n          text\n        }, ...state.todos],\n        originalTodos: [{ ...todo,\n          text\n        }, ...state.todos]\n      };\n    },\n    remove: (state = initialState, {\n      payload\n    }) => {\n      // todo implement function for remove todo from the list\n      const id = payload;\n      const newTodos = state.todos.filter(item => item.id !== id);\n      return { ...state,\n        todos: newTodos,\n        originalTodos: newTodos\n      };\n    },\n    markAsChecked: (state = initialState, {\n      payload\n    }) => {\n      // todo implement function for mark task checked by id\n      const id = payload;\n      const todos = [...state.todos].map(item => {\n        if (item.id === id) {\n          item.checked = !item.checked;\n        }\n\n        return item;\n      });\n\n      if (todoIndex) {\n        todos[todoIndex].checked = !todos[todoIndex].checked;\n      }\n\n      console.log('todos', todos);\n      return { ...state,\n        todos: todos,\n        originalTodos: todos\n      };\n    },\n    clearCompleted: state => {\n      //todo implement funciton for remove all completed (checked ) tasks\n      const completed = state.todos.filter(item => !item.checked);\n      return {\n        todos: completed\n      };\n    },\n    checkAll: state => {\n      const checkAllItem = state.todos.every(item => item.checked);\n      const unCheckAll = state.todos.every(item => !item.checked);\n\n      const mapAllTodos = checkStatus => {\n        state.todos.map(item => {\n          return item.checked = checkStatus ? !item.checked : true;\n        });\n      };\n\n      if (checkAllItem || unCheckAll) {\n        mapAllTodos(true);\n      } else {\n        mapAllTodos(false);\n      }\n    },\n    All: state => {\n      if (state.todos.length > 0) return { ...state.todos\n      };\n    },\n    ToDo: state => {\n      const notCompleted = state.todos.filter(item => !item.checked);\n      return { ...state,\n        todos: notCompleted\n      };\n    },\n    Completed: state => {\n      const completed = state.todos.filter(item => item.checked);\n      return { ...state,\n        todos: completed\n      };\n    }\n  }\n});\nexport const actions = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["/home/user/work/react-redux-todo/todoList/src/app/Containers/TodoList/todoSlice.js"],"names":["Subscriptions","createSlice","initialState","todos","originalTodos","item","id","value","checked","todoSlice","name","hydrate","state","action","payload","reducers","handleChange","add","todo","Math","random","toFixed","text","remove","newTodos","filter","markAsChecked","map","todoIndex","console","log","clearCompleted","completed","checkAll","checkAllItem","every","unCheckAll","mapAllTodos","checkStatus","All","length","ToDo","notCompleted","Completed","actions","reducer"],"mappings":"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","sourcesContent":["/* eslint-disable default-case */\nimport { Subscriptions } from '@material-ui/icons';\nimport { createSlice } from '@reduxjs/toolkit';\n\n\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: [],\n  originalTodos: [],\n  item: '',\n  id: 0,\n  value: '',\n  checked: false\n};\n\n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  hydrate:(state, action) => {\n    // do not do state = action.payload it will not update the store\n    return action.payload\n  },\n  reducers: {\n\n    handleChange: (state = initialState, {payload}) => {\n      \n      return {\n        ...state,\n        value: payload\n      };\n    },\n\n\n    add: (state = initialState, {payload}) => {  // todo implement function for add new todo into list\n        const todo = {\n         id: (Math.random()).toFixed(3),\n         checked: false \n        }\n        let text = state.value;\n\n      return {\n        ...state,\n        todos: [{...todo, text}, ...state.todos],\n        originalTodos: [{...todo, text}, ...state.todos],\n      };\n    },\n\n    remove: (state = initialState, {payload}) => {  // todo implement function for remove todo from the list\n\n      const id = payload;\n      const newTodos =  state.todos.filter(item => item.id !== id);\n      \n        return {\n          ...state,\n          todos: newTodos,\n          originalTodos: newTodos\n        };\n    },\n\n    markAsChecked: (state = initialState, {payload}) => {  // todo implement function for mark task checked by id\n\n      const id = payload;\n      const todos = [...state.todos].map(item => {\n        if (item.id === id) {\n          item.checked = !item.checked;\n        }\n\n        return item\n      });\n\n      if (todoIndex) {\n        todos[todoIndex].checked = !todos[todoIndex].checked;\n      }\n\n      console.log('todos', todos)\n\n      return {\n        ...state,\n        todos: todos,\n        originalTodos: todos,\n      }\n\n    },\n\n    clearCompleted: (state) => {  //todo implement funciton for remove all completed (checked ) tasks\n       const completed = state.todos.filter(item => !item.checked);\n      \n        return {\n          todos: completed\n        };    \n    },\n\n    checkAll: (state) => {\n\n        const checkAllItem = state.todos.every(item => item.checked);\n        const unCheckAll = state.todos.every(item => !item.checked);\n          \n        const mapAllTodos = (checkStatus) => {\n          state.todos.map(item => { \n            return ( item.checked = checkStatus ? !item.checked : true )\n          });\n        }\n      \n        if (checkAllItem || unCheckAll) {\n           mapAllTodos(true);\n          } else {\n           mapAllTodos(false);\n        }\n    },\n\n    All: (state) => {\n      if (state.todos.length > 0)\n      return {\n        ...state.todos\n      };\n    },\n    \n    ToDo: (state) => {\n      const notCompleted = state.todos.filter(item => !item.checked);\n      return {\n        ...state,\n        todos: notCompleted\n      }; \n    },\n\n    Completed: (state) => {\n      const completed = state.todos.filter(item => item.checked);\n      return {\n        ...state,\n        todos: completed\n      };\n    }\n\n  }  \n});\n\n\nexport const actions = todoSlice.actions;\n\n\nexport default todoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}