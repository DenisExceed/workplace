{"ast":null,"code":"/* eslint-disable default-case */\nimport { Subscriptions } from '@material-ui/icons';\nimport { createSlice } from '@reduxjs/toolkit';\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: [],\n  filterChecked: [this.todos.filter(item => item.checked)],\n  filterNotChecked: [this.todos.filter(item => item.checked)],\n  item: '',\n  id: 0,\n  value: ''\n};\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  hydrate: (state, action) => {\n    // do not do state = action.payload it will not update the store\n    return action.payload;\n  },\n  reducers: {\n    handleChange: (state = initialState, {\n      payload\n    }) => {\n      return { ...state,\n        value: payload\n      };\n    },\n    add: (state = initialState, {\n      payload\n    }) => {\n      // todo implement function for add new todo into list\n      const todo = {\n        id: Math.random().toFixed(3),\n        checked: false\n      };\n      let text = state.value;\n      return { ...state,\n        todos: [{ ...todo,\n          text\n        }, ...state.todos]\n      };\n    },\n    remove: (state = initialState, {\n      payload\n    }) => {\n      // todo implement function for remove todo from the list\n      const id = payload;\n      const newTodos = state.todos.filter(item => item.id !== id);\n      return { ...state,\n        todos: newTodos\n      };\n    },\n    markAsChecked: (state = initialState, {\n      payload\n    }) => {\n      // todo implement function for mark task checked by id\n      const id = payload;\n      const todoIndex = state.todos.find(item => item.id === id);\n\n      if (todoIndex) {\n        todoIndex.checked = !todoIndex.checked;\n      }\n    },\n    clearCompleted: state => {\n      //todo implement funciton for remove all completed (checked ) tasks\n      const completed = state.todos.filter(item => !item.checked);\n      return {\n        todos: completed\n      };\n    },\n    checkAll: state => {\n      const checkAllItem = state.todos.every(item => item.checked);\n      const unCheckAll = state.todos.every(item => !item.checked);\n\n      const mapAllTodos = checkStatus => {\n        state.todos.map(item => {\n          return item.checked = checkStatus ? !item.checked : true;\n        });\n      };\n\n      if (checkAllItem || unCheckAll) {\n        mapAllTodos(true);\n      } else {\n        mapAllTodos(false);\n      }\n    },\n    All: state => {\n      return { ...state\n      };\n    },\n    ToDo: state => {\n      const notCompleted = state.todos.filter(item => item.checked === false);\n      return { ...state,\n        todos: notCompleted\n      };\n    },\n    Completed: state => {\n      const completed = state.todos.filter(item => item.checked);\n      return { ...state,\n        todos: completed\n      };\n    }\n  }\n});\nexport const actions = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["/home/user/work/react-redux-todo/todoList/src/app/Containers/TodoList/todoSlice.js"],"names":["Subscriptions","createSlice","initialState","todos","filterChecked","filter","item","checked","filterNotChecked","id","value","todoSlice","name","hydrate","state","action","payload","reducers","handleChange","add","todo","Math","random","toFixed","text","remove","newTodos","markAsChecked","todoIndex","find","clearCompleted","completed","checkAll","checkAllItem","every","unCheckAll","mapAllTodos","checkStatus","map","All","ToDo","notCompleted","Completed","actions","reducer"],"mappings":"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","sourcesContent":["/* eslint-disable default-case */\nimport { Subscriptions } from '@material-ui/icons';\nimport { createSlice } from '@reduxjs/toolkit';\n\n\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: [],\n  filterChecked: [this.todos.filter(item => item.checked)],\n  filterNotChecked: [this.todos.filter(item => item.checked)],\n  item: '',\n  id: 0,\n  value: ''\n};\n\n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  hydrate:(state, action) => {\n    // do not do state = action.payload it will not update the store\n    return action.payload\n  },\n  reducers: {\n\n    handleChange: (state = initialState, {payload}) => {\n      \n      return {\n        ...state,\n        value: payload\n      };\n    },\n\n\n    add: (state = initialState, {payload}) => {  // todo implement function for add new todo into list\n        const todo = {\n         id: (Math.random()).toFixed(3),\n         checked: false \n        }\n        let text = state.value;\n\n      return {\n        ...state,\n        todos: [{...todo, text}, ...state.todos]\n      };\n    },\n\n    remove: (state = initialState, {payload}) => {  // todo implement function for remove todo from the list\n\n      const id = payload;\n      const newTodos =  state.todos.filter(item => item.id !== id);\n      \n        return {\n          ...state,\n          todos: newTodos\n        };\n    },\n\n    markAsChecked: (state = initialState, {payload}) => {  // todo implement function for mark task checked by id\n\n      const id = payload;\n      const todoIndex = state.todos.find(item => item.id === id);\n\n      if (todoIndex) {\n        todoIndex.checked = !todoIndex.checked;\n      }\n    },\n\n    clearCompleted: (state) => {  //todo implement funciton for remove all completed (checked ) tasks\n       const completed = state.todos.filter(item => !item.checked);\n      \n        return {\n          todos: completed\n        };    \n    },\n\n    checkAll: (state) => {\n\n        const checkAllItem = state.todos.every(item => item.checked);\n        const unCheckAll = state.todos.every(item => !item.checked);\n          \n        const mapAllTodos = (checkStatus) => {\n          state.todos.map(item => { \n            return ( item.checked = checkStatus ? !item.checked : true )\n          });\n        }\n      \n        if (checkAllItem || unCheckAll) {\n           mapAllTodos(true);\n          } else {\n           mapAllTodos(false);\n        }\n    },\n\n    All: (state) => {\n      return {\n        ...state\n      };\n    },\n    \n    ToDo: (state) => {\n      const notCompleted = state.todos.filter(item => item.checked === false);\n      return {\n        ...state,\n        todos: notCompleted\n      }; \n    },\n\n    Completed: (state) => {\n      const completed = state.todos.filter(item => item.checked);\n      return {\n        ...state,\n        todos: completed\n      };\n    }\n\n  }  \n});\n\n\nexport const actions = todoSlice.actions;\n\n\nexport default todoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}