{"ast":null,"code":"/* eslint-disable default-case */\nimport { createSlice } from '@reduxjs/toolkit';\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: [],\n  filter: 'All',\n  item: '',\n  id: 0,\n  value: ''\n};\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    handleChange: (state = initialState, {\n      payload\n    }) => {\n      return { ...state,\n        value: payload\n      };\n    },\n    add: (state = initialState, {\n      payload\n    }) => {\n      // todo implement function for add new todo into list\n      const todo = {\n        id: Math.random().toFixed(3),\n        checked: false\n      };\n      let text = state.value;\n      return { ...state,\n        todos: [{ ...todo,\n          text\n        }, ...state.todos]\n      };\n    },\n    remove: (state = initialState, {\n      payload\n    }) => {\n      // todo implement function for remove todo from the list\n      const id = payload;\n      const newTodos = state.todos.filter(item => item.id !== id);\n      return { ...state,\n        todos: newTodos\n      };\n    },\n    markAsChecked: (state = initialState, {\n      payload\n    }) => {\n      // todo implement function for mark task checked by id\n      const id = payload;\n      const todoIndex = state.todos.find(item => item.id === id);\n\n      if (todoIndex) {\n        todoIndex.checked = !todoIndex.checked;\n      }\n    },\n    clearCompleted: state => {\n      //todo implement funciton for remove all completed (checked ) tasks\n      const completed = state.todos.filter(item => !item.checked);\n      return {\n        todos: completed\n      };\n    },\n    checkAll: state => {\n      const checkAllItem = state.todos.every(item => item.checked);\n      const unCheckAll = state.todos.every(item => !item.checked);\n\n      const mapAllTodos = checkStatus => {\n        state.todos.map(item => {\n          item.checked = checkStatus ? !item.checked : true;\n        });\n      };\n\n      if (checkAllItem || unCheckAll) {\n        mapAllTodos(true);\n      } else {\n        mapAllTodos(false);\n      }\n    }\n  }\n});\nexport const actions = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["/home/user/work/react-redux-todo/todoList/src/app/Containers/TodoList/todoSlice.js"],"names":["createSlice","initialState","todos","filter","item","id","value","todoSlice","name","reducers","handleChange","state","payload","add","todo","Math","random","toFixed","checked","text","remove","newTodos","markAsChecked","todoIndex","find","clearCompleted","completed","checkAll","checkAllItem","every","unCheckAll","mapAllTodos","checkStatus","map","actions","reducer"],"mappings":"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","sourcesContent":["/* eslint-disable default-case */\nimport { createSlice } from '@reduxjs/toolkit';\n\n\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: [],\n  filter: 'All',\n  item: '',\n  id: 0,\n  value: '',\n};\n\n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n\n    handleChange: (state = initialState, {payload}) => {\n      \n      return {\n        ...state,\n        value: payload\n      };\n    },\n\n\n    add: (state = initialState, {payload}) => {  // todo implement function for add new todo into list\n        const todo = {\n         id: (Math.random()).toFixed(3),\n         checked: false \n        }\n        let text = state.value;\n\n      return {\n        ...state,\n        todos: [{...todo, text}, ...state.todos]\n      };\n    },\n\n    remove: (state = initialState, {payload}) => {  // todo implement function for remove todo from the list\n\n      const id = payload;\n      const newTodos =  state.todos.filter(item => item.id !== id);\n      \n        return {\n          ...state,\n          todos: newTodos\n        };\n    },\n\n    markAsChecked: (state = initialState, {payload}) => {  // todo implement function for mark task checked by id\n\n      const id = payload;\n      const todoIndex = state.todos.find(item => item.id === id);\n\n      if (todoIndex) {\n        todoIndex.checked = !todoIndex.checked;\n      }\n    },\n\n    clearCompleted: (state) => {  //todo implement funciton for remove all completed (checked ) tasks\n       const completed = state.todos.filter(item => !item.checked);\n      \n        return {\n          todos: completed\n        };    \n    },\n\n    checkAll: (state) => {\n\n        const checkAllItem = state.todos.every(item => item.checked);\n        const unCheckAll = state.todos.every(item => !item.checked);\n          \n        const mapAllTodos = (checkStatus) => {\n          state.todos.map(item => {\n            item.checked = checkStatus ? !item.checked : true;\n           });\n          }\n      \n        if (checkAllItem || unCheckAll) {\n           mapAllTodos(true);\n         } else {\n           mapAllTodos(false);\n        }\n      \n    }\n  }  \n});\n\n\nexport const actions = todoSlice.actions;\n\n\nexport default todoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}