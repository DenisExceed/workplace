{"ast":null,"code":"/* eslint-disable default-case */\n// import { Subscriptions } from '@material-ui/icons';\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: JSON.parse(localStorage.getItem('todos')) ? JSON.parse(localStorage.getItem('todos')) : [],\n  item: '',\n  value: '',\n  id: 0,\n  status: 'All'\n};\nexport const createItem = createAsyncThunk('Add:', async text => {\n  const newTodo = await axios.post(`http://localhost:5000`, {\n    value: text,\n    checked: false\n  }).then(res => {\n    const item = {\n      _id: res.data.task._id,\n      value: res.data.task.value,\n      checked: false\n    };\n    return item;\n  }).catch(error => console.log('Ошибка', error));\n  return newTodo;\n});\nexport const deleteItem = createAsyncThunk('Delete:', async id => {\n  const newTodos = state.todos.filter(item => item.id !== id);\n  axios.delete(`http://localhost:5000/${id}/`).then(window.location.reload());\n  return { ...state,\n    todos: newTodos\n  };\n  const newTodo = await axios.post(`http://localhost:5000`, {\n    value: text,\n    checked: false\n  }).then(res => {\n    const item = {\n      _id: res.data.task._id,\n      value: res.data.task.value,\n      checked: false\n    };\n    return item;\n  }).catch(error => console.log('Ошибка', error));\n  return newTodo;\n});\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    handleChange: (state = initialState, {\n      payload\n    }) => {\n      return { ...state,\n        value: payload\n      };\n    },\n    get: (state = initialState, {\n      payload\n    }) => {\n      return { ...state,\n        todos: payload\n      };\n    },\n    // add: (state = initialState, { payload }) => {\n    //   return state;\n    // //   if (!state.value.length || state.value === '' || state.value.trim() === '') { return state }\n    // //   let text = state.value;\n    // // return {\n    // //   ...state,\n    // //   todos: [...state.todos, newTodo]\n    // // }\n    // },\n    remove: (state = initialState, {\n      payload\n    }) => {\n      // todo implement function for remove todo from the list\n      const id = payload;\n      const newTodos = state.todos.filter(item => item.id !== id);\n      axios.delete(`http://localhost:5000/${id}/`).then(window.location.reload());\n      return { ...state,\n        todos: newTodos\n      };\n    },\n    markAsChecked: (state = initialState, {\n      payload\n    }) => {\n      // todo implement function for mark task checked by id\n      const id = payload;\n      const todos = [...state.todos].map(({ ...item\n      }) => {\n        if (item._id === id) {\n          item.checked = !item.checked;\n          axios.put(`http://localhost:5000/${id}/`, {\n            checked: true\n          });\n        }\n\n        if (item._id === id && !item.checked) {\n          axios.put(`http://localhost:5000/${id}/`, {\n            checked: false\n          });\n        }\n\n        return item;\n      });\n      return { ...state,\n        todos: todos\n      };\n    },\n    clearCompleted: state => {\n      //todo implement funciton for remove all completed (checked ) tasks\n      const notCompleted = state.todos.filter(item => !item.checked);\n      const completed = state.todos.filter(item => item.checked);\n      axios.post('http://localhost:5000/deleteChecked', {\n        itemId: completed.map(item => item._id)\n      });\n      return { ...state,\n        todos: notCompleted\n      };\n    },\n    checkAll: state => {\n      const status = state.todos.some(item => item.checked);\n\n      const mapAllTodos = checkStatus => {\n        return [...state.todos].map(({ ...item\n        }) => {\n          item.checked = checkStatus;\n\n          if (item.checked) {\n            axios.put(`http://localhost:5000/`, {\n              checked: true\n            });\n          }\n\n          if (!item.checked) {\n            axios.put(`http://localhost:5000/`, {\n              checked: false\n            });\n          }\n\n          return item;\n        });\n      };\n\n      const todos = mapAllTodos(!status);\n      return { ...state,\n        todos: todos\n      };\n    },\n    All: state => {\n      return { ...state,\n        status: 'All'\n      };\n    },\n    ToDo: state => {\n      return { ...state,\n        status: 'Todo'\n      };\n    },\n    Completed: state => {\n      return { ...state,\n        status: 'Completed'\n      };\n    }\n  },\n  extraReducers: builder => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(createItem.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.todos.push(action.payload);\n    }, deleteItem.fulfilled, (state, action) => {\n      // Del user from the state array\n      state.todos.shift(action.payload);\n    });\n  }\n});\nexport const actions = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["/home/user/work/react-redux-todo/todoList/src/app/Containers/TodoList/todoSlice.js"],"names":["createSlice","createAsyncThunk","axios","initialState","todos","JSON","parse","localStorage","getItem","item","value","id","status","createItem","text","newTodo","post","checked","then","res","_id","data","task","catch","error","console","log","deleteItem","newTodos","state","filter","delete","window","location","reload","todoSlice","name","reducers","handleChange","payload","get","remove","markAsChecked","map","put","clearCompleted","notCompleted","completed","itemId","checkAll","some","mapAllTodos","checkStatus","All","ToDo","Completed","extraReducers","builder","addCase","fulfilled","action","push","shift","actions","reducer"],"mappings":"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","sourcesContent":["/* eslint-disable default-case */\n// import { Subscriptions } from '@material-ui/icons';\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\n\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: JSON.parse(localStorage.getItem('todos')) ? JSON.parse(localStorage.getItem('todos')) : [],\n  item: '',\n  value: '',\n  id: 0,\n  status: 'All',\n};\n\nexport const createItem = createAsyncThunk(\n\n'Add:',\n  async (text) => {\n\n    const newTodo = await axios\n      .post(`http://localhost:5000`, { value: text, checked: false })\n      .then((res) => {\n\n        const item = {\n          _id: res.data.task._id,\n          value: res.data.task.value,\n          checked: false,\n        }\n        \n        return item;\n      })\n      .catch((error) => console.log('Ошибка', error));\n\n    return newTodo;\n\n  }\n)\n\nexport const deleteItem = createAsyncThunk(\n\n  'Delete:',\n    async (id) => {\n\n\n      const newTodos =  state.todos.filter(item => item.id !== id);\n\n      axios\n      .delete(`http://localhost:5000/${id}/`)\n      .then(\n        window.location.reload()\n      )  \n\n      \n        return {\n          ...state,\n          todos: newTodos,\n        };\n\n\n\n\n\n\n      const newTodo = await axios\n        .post(`http://localhost:5000`, { value: text, checked: false })\n        .then((res) => {\n  \n          const item = {\n            _id: res.data.task._id,\n            value: res.data.task.value,\n            checked: false,\n          }\n          \n          return item;\n        })\n        .catch((error) => console.log('Ошибка', error));\n  \n      return newTodo;\n  \n    }\n  )\n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n\n    handleChange: (state = initialState, { payload }) => {\n\n       return {\n        ...state,\n        value: payload\n      };\n    },\n\n    get: (state = initialState, { payload }) => {\n      return {\n        ...state,\n        todos: payload\n      }\n    },\n\n\n    // add: (state = initialState, { payload }) => {\n\n    //   return state;\n    // //   if (!state.value.length || state.value === '' || state.value.trim() === '') { return state }\n    // //   let text = state.value;\n\n   \n    // // return {\n    // //   ...state,\n    // //   todos: [...state.todos, newTodo]\n    // // }\n\n    // },\n\n    remove: (state = initialState, {payload}) => {  // todo implement function for remove todo from the list\n\n      const id = payload;\n      const newTodos =  state.todos.filter(item => item.id !== id);\n\n      axios\n      .delete(`http://localhost:5000/${id}/`)\n      .then(\n        window.location.reload()\n      )  \n\n      \n        return {\n          ...state,\n          todos: newTodos,\n        };\n    },\n\n    markAsChecked: (state = initialState, {payload}) => {  // todo implement function for mark task checked by id\n\n      const id = payload;\n\n      const todos = [...state.todos].map(({...item}) => {\n        if (item._id === id) {\n          item.checked = !item.checked;\n\n          axios\n            .put(`http://localhost:5000/${id}/`, { checked: true })        \n        }\n\n        if (item._id === id && !item.checked) {\n          axios\n            .put(`http://localhost:5000/${id}/`, { checked: false })        \n        }\n\n        return item  \n      });\n\n      return {\n        ...state,\n        todos: todos\n      }\n\n    },\n\n    clearCompleted: (state) => {  //todo implement funciton for remove all completed (checked ) tasks\n      \n\n      const notCompleted = state.todos.filter(item => !item.checked);\n      const completed = state.todos.filter(item => item.checked);\n\n      axios\n      .post('http://localhost:5000/deleteChecked', {itemId: completed.map(item => item._id)});\n\n      \n        return {\n          ...state,\n          todos: notCompleted,\n        };    \n    },\n\n    checkAll: (state) => {\n\n        const status = state.todos.some(item => item.checked);\n          \n        const mapAllTodos = (checkStatus) => {\n\n          return [...state.todos].map(({...item}) => {\n            \n            item.checked = checkStatus;\n\n            if(item.checked) {\n              axios\n              .put(`http://localhost:5000/`, { checked: true })  \n            }\n\n            if(!item.checked) {\n              axios\n              .put(`http://localhost:5000/`, { checked: false })  \n            }\n\n            return item;\n          });\n        }\n\n        const todos = mapAllTodos(!status);\n   \n\n        return {\n          ...state,\n          todos: todos,\n        };  \n    },\n\n    All: (state) => {\n      return {\n        ...state,\n        status: 'All',\n      };\n    },\n    \n    ToDo: (state) => {\n      return {\n        ...state,\n        status: 'Todo',\n      }; \n    },\n\n    Completed: (state) => {\n      return {\n        ...state,\n        status: 'Completed',\n      };\n    }\n\n  },\n  extraReducers: (builder) => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(\n      \n      createItem.fulfilled, (state, action) => {\n      // Add user to the state array\n       state.todos.push(action.payload)\n      },\n\n      deleteItem.fulfilled, (state, action) => {\n        // Del user from the state array\n         state.todos.shift(action.payload)\n      }\n\n    )\n  },\n});\n\n\nexport const actions = todoSlice.actions;\n\nexport default todoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}