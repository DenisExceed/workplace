{"ast":null,"code":"/* eslint-disable default-case */\n// import { Subscriptions } from '@material-ui/icons';\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: JSON.parse(localStorage.getItem('todos')) ? JSON.parse(localStorage.getItem('todos')) : [],\n  item: '',\n  value: '',\n  id: 0,\n  status: 'All'\n};\nexport const fetchUserById = createAsyncThunk('Add:', async text => {\n  const newTodo = await axios.post(`http://localhost:5000`, {\n    value: text,\n    checked: false\n  }).then(res => {\n    const item = {\n      _id: res.data.task._id,\n      value: res.data.task.value,\n      checked: false\n    };\n    return item;\n  }).catch(error => console.log('Ошибка', error));\n  return newTodo;\n} // 'Delete:',\n// async (text) => {\n//   const newTodo = await axios\n//     .delete(`http://localhost:5000/${id}/`)\n//     .then((res) => {\n//       const id = payload;\n//       const newTodos =  state.todos.filter(item => item.id !== id);\n//       return item;\n//     })\n//     .catch((error) => console.log('Ошибка', error));\n//   return newTodo;\n// }\n);\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    handleChange: (state = initialState, {\n      payload\n    }) => {\n      return { ...state,\n        value: payload\n      };\n    },\n    get: (state = initialState, {\n      payload\n    }) => {\n      return { ...state,\n        todos: payload\n      };\n    },\n    // add: (state = initialState, { payload }) => {\n    //   return state;\n    // //   if (!state.value.length || state.value === '' || state.value.trim() === '') { return state }\n    // //   let text = state.value;\n    // // return {\n    // //   ...state,\n    // //   todos: [...state.todos, newTodo]\n    // // }\n    // },\n    remove: (state = initialState, {\n      payload\n    }) => {\n      // todo implement function for remove todo from the list\n      const id = payload;\n      const newTodos = state.todos.filter(item => item.id !== id);\n      axios.delete(`http://localhost:5000/${id}/`).then(window.location.reload());\n      return { ...state,\n        todos: newTodos\n      };\n    },\n    markAsChecked: (state = initialState, {\n      payload\n    }) => {\n      // todo implement function for mark task checked by id\n      const id = payload;\n      const todos = [...state.todos].map(({ ...item\n      }) => {\n        if (item._id === id) {\n          item.checked = !item.checked;\n          axios.put(`http://localhost:5000/${id}/`, {\n            checked: true\n          });\n        }\n\n        if (item._id === id && !item.checked) {\n          axios.put(`http://localhost:5000/${id}/`, {\n            checked: false\n          });\n        }\n\n        return item;\n      });\n      return { ...state,\n        todos: todos\n      };\n    },\n    clearCompleted: (state, {\n      payload\n    }) => {\n      //todo implement funciton for remove all completed (checked ) tasks\n      console.log(`payload`, payload);\n      const id = payload;\n      const completed = state.todos.filter(item => !item.checked);\n\n      const allCheckedId = i => {\n        completed.forEach(i => i.id);\n        return i;\n      };\n\n      if (allCheckedId) {\n        axios.delete(`http://localhost:5000/`);\n      }\n\n      return { ...state,\n        todos: completed\n      };\n    },\n    checkAll: state => {\n      const status = state.todos.some(item => item.checked);\n\n      const mapAllTodos = checkStatus => {\n        return [...state.todos].map(({ ...item\n        }) => {\n          item.checked = checkStatus;\n\n          if (item.checked) {\n            axios.put(`http://localhost:5000/`, {\n              checked: true\n            });\n          }\n\n          if (!item.checked) {\n            axios.put(`http://localhost:5000/`, {\n              checked: false\n            });\n          }\n\n          return item;\n        });\n      };\n\n      const todos = mapAllTodos(!status);\n      return { ...state,\n        todos: todos\n      };\n    },\n    All: state => {\n      return { ...state,\n        status: 'All'\n      };\n    },\n    ToDo: state => {\n      return { ...state,\n        status: 'Todo'\n      };\n    },\n    Completed: state => {\n      return { ...state,\n        status: 'Completed'\n      };\n    }\n  },\n  extraReducers: builder => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(fetchUserById.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.todos.push(action.payload);\n    });\n  }\n});\nexport const actions = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["/home/user/work/react-redux-todo/todoList/src/app/Containers/TodoList/todoSlice.js"],"names":["createSlice","createAsyncThunk","axios","initialState","todos","JSON","parse","localStorage","getItem","item","value","id","status","fetchUserById","text","newTodo","post","checked","then","res","_id","data","task","catch","error","console","log","todoSlice","name","reducers","handleChange","state","payload","get","remove","newTodos","filter","delete","window","location","reload","markAsChecked","map","put","clearCompleted","completed","allCheckedId","i","forEach","checkAll","some","mapAllTodos","checkStatus","All","ToDo","Completed","extraReducers","builder","addCase","fulfilled","action","push","actions","reducer"],"mappings":"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","sourcesContent":["/* eslint-disable default-case */\n// import { Subscriptions } from '@material-ui/icons';\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\n\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: JSON.parse(localStorage.getItem('todos')) ? JSON.parse(localStorage.getItem('todos')) : [],\n  item: '',\n  value: '',\n  id: 0,\n  status: 'All',\n};\n\nexport const fetchUserById = createAsyncThunk(\n\n'Add:',\n  async (text) => {\n\n    const newTodo = await axios\n      .post(`http://localhost:5000`, { value: text, checked: false })\n      .then((res) => {\n\n        const item = {\n          _id: res.data.task._id,\n          value: res.data.task.value,\n          checked: false,\n        }\n        \n        return item;\n      })\n      .catch((error) => console.log('Ошибка', error));\n\n    return newTodo;\n\n  }\n\n\n  // 'Delete:',\n  // async (text) => {\n\n  //   const newTodo = await axios\n  //     .delete(`http://localhost:5000/${id}/`)\n  //     .then((res) => {\n\n  //       const id = payload;\n  //       const newTodos =  state.todos.filter(item => item.id !== id);\n        \n  //       return item;\n  //     })\n  //     .catch((error) => console.log('Ошибка', error));\n\n  //   return newTodo;\n\n  // }\n\n)\n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n\n    handleChange: (state = initialState, { payload }) => {\n\n       return {\n        ...state,\n        value: payload\n      };\n    },\n\n    get: (state = initialState, { payload }) => {\n      return {\n        ...state,\n        todos: payload\n      }\n    },\n\n\n    // add: (state = initialState, { payload }) => {\n\n    //   return state;\n    // //   if (!state.value.length || state.value === '' || state.value.trim() === '') { return state }\n    // //   let text = state.value;\n\n   \n    // // return {\n    // //   ...state,\n    // //   todos: [...state.todos, newTodo]\n    // // }\n\n    // },\n\n    remove: (state = initialState, {payload}) => {  // todo implement function for remove todo from the list\n\n      const id = payload;\n      const newTodos =  state.todos.filter(item => item.id !== id);\n\n      axios\n      .delete(`http://localhost:5000/${id}/`)\n      .then(\n        window.location.reload()\n      )  \n\n      \n        return {\n          ...state,\n          todos: newTodos,\n        };\n    },\n\n    markAsChecked: (state = initialState, {payload}) => {  // todo implement function for mark task checked by id\n\n      const id = payload;\n\n      const todos = [...state.todos].map(({...item}) => {\n        if (item._id === id) {\n          item.checked = !item.checked;\n\n          axios\n            .put(`http://localhost:5000/${id}/`, { checked: true })        \n        }\n\n        if (item._id === id && !item.checked) {\n          axios\n            .put(`http://localhost:5000/${id}/`, { checked: false })        \n        }\n\n        return item  \n      });\n\n      return {\n        ...state,\n        todos: todos\n      }\n\n    },\n\n    clearCompleted: (state, {payload}) => {  //todo implement funciton for remove all completed (checked ) tasks\n      \n\n      console.log(`payload`, payload)\n\n      const id = payload;\n      const completed = state.todos.filter(item => !item.checked);\n\n      const allCheckedId = (i) => { \n\n        completed.forEach(i => i.id)\n\n        return i\n      }\n\n       if(allCheckedId) {\n        axios\n        .delete(`http://localhost:5000/`)  \n      }\n\n\n      \n        return {\n          ...state,\n          todos: completed,\n        };    \n    },\n\n    checkAll: (state) => {\n\n        const status = state.todos.some(item => item.checked);\n          \n        const mapAllTodos = (checkStatus) => {\n\n          return [...state.todos].map(({...item}) => {\n            \n            item.checked = checkStatus;\n\n            if(item.checked) {\n              axios\n              .put(`http://localhost:5000/`, { checked: true })  \n            }\n\n            if(!item.checked) {\n              axios\n              .put(`http://localhost:5000/`, { checked: false })  \n            }\n\n            return item;\n          });\n        }\n\n        const todos = mapAllTodos(!status);\n   \n\n        return {\n          ...state,\n          todos: todos,\n        };  \n    },\n\n    All: (state) => {\n      return {\n        ...state,\n        status: 'All',\n      };\n    },\n    \n    ToDo: (state) => {\n      return {\n        ...state,\n        status: 'Todo',\n      }; \n    },\n\n    Completed: (state) => {\n      return {\n        ...state,\n        status: 'Completed',\n      };\n    }\n\n  },\n  extraReducers: (builder) => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(fetchUserById.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.todos.push(action.payload)\n    })\n  },\n});\n\n\nexport const actions = todoSlice.actions;\n\nexport default todoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}