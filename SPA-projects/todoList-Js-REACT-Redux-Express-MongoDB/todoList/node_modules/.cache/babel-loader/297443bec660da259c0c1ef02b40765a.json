{"ast":null,"code":"/* eslint-disable default-case */\n// import { Subscriptions } from '@material-ui/icons';\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: JSON.parse(localStorage.getItem('todos')) ? JSON.parse(localStorage.getItem('todos')) : [],\n  item: '',\n  value: '',\n  status: 'All',\n  test: []\n};\nexport const fetchUserById = createAsyncThunk('Add:', async text => {\n  const newTodo = await axios.post(`http://localhost:5000`, {\n    value: text,\n    checked: false\n  }).then(res => {\n    const item = {\n      _id: res.data._id,\n      value: res.data.value,\n      checked: false\n    };\n    return item;\n  }).catch(error => console.log('Ошибка', error));\n  return newTodo;\n} // 'Delete:',\n// async (text) => {\n//   const newTodo = await axios\n//     .delete(`http://localhost:5000`, { value: text, checked: false })\n//     .then((res) => {\n//       const id = payload;\n//       const newTodos =  state.todos.filter(item => item.id !== id);\n//       return item;\n//     })\n//     .catch((error) => console.log('Ошибка', error));\n//   return newTodo;\n// }\n);\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    handleChange: (state = initialState, {\n      payload\n    }) => {\n      return { ...state,\n        value: payload\n      };\n    },\n    get: (state = initialState, {\n      payload\n    }) => {\n      return { ...state,\n        todos: payload\n      };\n    },\n    // add: (state = initialState, { payload }) => {\n    //   return state;\n    // //   if (!state.value.length || state.value === '' || state.value.trim() === '') { return state }\n    // //   let text = state.value;\n    // // return {\n    // //   ...state,\n    // //   todos: [...state.todos, newTodo]\n    // // }\n    // },\n    remove: (state = initialState, {\n      payload\n    }) => {\n      // todo implement function for remove todo from the list\n      const id = payload;\n      const newTodos = state.todos.filter(item => item.id !== id);\n      return { ...state,\n        todos: newTodos\n      };\n    },\n    markAsChecked: (state = initialState, {\n      payload\n    }) => {\n      // todo implement function for mark task checked by id\n      const id = payload;\n      const todos = [...state.todos].map(({ ...item\n      }) => {\n        if (item._id === id) {\n          item.checked = !item.checked;\n          axios.put(`http://localhost:5000/:id`, {\n            checked: true\n          });\n        }\n      });\n      return { ...state,\n        todos: todos\n      };\n    },\n    clearCompleted: state => {\n      //todo implement funciton for remove all completed (checked ) tasks\n      const completed = state.todos.filter(item => !item.checked);\n      localStorage.setItem('todos', JSON.stringify(completed));\n      return { ...state,\n        todos: completed\n      };\n    },\n    checkAll: state => {\n      const status = state.todos.some(item => item.checked);\n\n      const mapAllTodos = checkStatus => {\n        return [...state.todos].map(({ ...item\n        }) => {\n          item.checked = checkStatus;\n          return item;\n        });\n      };\n\n      const todos = mapAllTodos(!status);\n      localStorage.setItem('todos', JSON.stringify(todos));\n      return { ...state,\n        todos: todos\n      };\n    },\n    All: state => {\n      return { ...state,\n        status: 'All'\n      };\n    },\n    ToDo: state => {\n      return { ...state,\n        status: 'Todo'\n      };\n    },\n    Completed: state => {\n      return { ...state,\n        status: 'Completed'\n      };\n    }\n  },\n  extraReducers: builder => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(fetchUserById.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.todos.push(action.payload);\n    });\n  }\n});\nexport const actions = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["/home/user/work/react-redux-todo/todoList/src/app/Containers/TodoList/todoSlice.js"],"names":["createSlice","createAsyncThunk","axios","initialState","todos","JSON","parse","localStorage","getItem","item","value","status","test","fetchUserById","text","newTodo","post","checked","then","res","_id","data","catch","error","console","log","todoSlice","name","reducers","handleChange","state","payload","get","remove","id","newTodos","filter","markAsChecked","map","put","clearCompleted","completed","setItem","stringify","checkAll","some","mapAllTodos","checkStatus","All","ToDo","Completed","extraReducers","builder","addCase","fulfilled","action","push","actions","reducer"],"mappings":"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","sourcesContent":["/* eslint-disable default-case */\n// import { Subscriptions } from '@material-ui/icons';\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\n\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: JSON.parse(localStorage.getItem('todos')) ? JSON.parse(localStorage.getItem('todos')) : [],\n  item: '',\n  value: '',\n  status: 'All',\n  test: [],\n};\n\nexport const fetchUserById = createAsyncThunk(\n\n'Add:',\n  async (text) => {\n\n    const newTodo = await axios\n      .post(`http://localhost:5000`, { value: text, checked: false })\n      .then((res) => {\n\n        const item = {\n          _id: res.data._id,\n          value: res.data.value,\n          checked: false,\n        }\n        \n        return item;\n      })\n      .catch((error) => console.log('Ошибка', error));\n\n    return newTodo;\n\n  }\n\n\n  // 'Delete:',\n  // async (text) => {\n\n  //   const newTodo = await axios\n  //     .delete(`http://localhost:5000`, { value: text, checked: false })\n  //     .then((res) => {\n\n  //       const id = payload;\n  //       const newTodos =  state.todos.filter(item => item.id !== id);\n        \n  //       return item;\n  //     })\n  //     .catch((error) => console.log('Ошибка', error));\n\n  //   return newTodo;\n\n  // }\n\n)\n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n\n    handleChange: (state = initialState, { payload }) => {\n\n       return {\n        ...state,\n        value: payload\n      };\n    },\n\n    get: (state = initialState, { payload }) => {\n      return {\n        ...state,\n        todos: payload\n      }\n    },\n\n\n    // add: (state = initialState, { payload }) => {\n\n    //   return state;\n    // //   if (!state.value.length || state.value === '' || state.value.trim() === '') { return state }\n    // //   let text = state.value;\n\n   \n    // // return {\n    // //   ...state,\n    // //   todos: [...state.todos, newTodo]\n    // // }\n\n    // },\n\n    remove: (state = initialState, {payload}) => {  // todo implement function for remove todo from the list\n\n      const id = payload;\n      const newTodos =  state.todos.filter(item => item.id !== id);\n\n      \n        return {\n          ...state,\n          todos: newTodos,\n        };\n    },\n\n    markAsChecked: (state = initialState, {payload}) => {  // todo implement function for mark task checked by id\n\n      const id = payload;\n\n      const todos = [...state.todos].map(({...item}) => {\n        if (item._id === id) {\n          item.checked = !item.checked;\n\n          axios\n            .put(`http://localhost:5000/:id`, { checked: true })\n        }\n\n      });\n\n      return {\n        ...state,\n        todos: todos\n      }\n\n    },\n\n    clearCompleted: (state) => {  //todo implement funciton for remove all completed (checked ) tasks\n       const completed = state.todos.filter(item => !item.checked);\n\n       localStorage.setItem('todos', JSON.stringify(completed));\n      \n        return {\n          ...state,\n          todos: completed,\n        };    \n    },\n\n    checkAll: (state) => {\n\n        const status = state.todos.some(item => item.checked);\n          \n        const mapAllTodos = (checkStatus) => {\n\n          return [...state.todos].map(({...item}) => { \n            item.checked = checkStatus;\n            return item;\n          });\n        }\n\n        const todos = mapAllTodos(!status);\n\n        localStorage.setItem('todos', JSON.stringify(todos));\n\n        return {\n          ...state,\n          todos: todos,\n        };  \n    },\n\n    All: (state) => {\n      return {\n        ...state,\n        status: 'All',\n      };\n    },\n    \n    ToDo: (state) => {\n      return {\n        ...state,\n        status: 'Todo',\n      }; \n    },\n\n    Completed: (state) => {\n      return {\n        ...state,\n        status: 'Completed',\n      };\n    }\n\n  },\n  extraReducers: (builder) => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(fetchUserById.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.todos.push(action.payload)\n    })\n  },\n});\n\n\nexport const actions = todoSlice.actions;\n\nexport default todoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}