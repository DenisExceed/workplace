{"ast":null,"code":"/* eslint-disable default-case */\nimport { createSlice } from '@reduxjs/toolkit';\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: [],\n  filter: 'All',\n  item: '',\n  id: 0,\n  value: ''\n};\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    // test: (state, data) => {\n    //   return {\n    //     ...state,\n    //     count: state.count,\n    //     templ: state.templ\n    //   };\n    // },\n    // /**\n    //  * text: string;\n    //  */\n    handleChange: (state = initialState, {\n      payload\n    }) => {\n      return { ...state,\n        value: payload\n      };\n    },\n    numOfCompleeted: (state = initialState, {\n      payload\n    }) => {\n      const completed = this.state.todos.filter(item => item.checked);\n      return completed.length;\n    },\n    numOfNotCompleeted: (state = initialState, {\n      payload\n    }) => {\n      const notCompleted = this.tate.todos.filter(item => item.checked === false);\n      return notCompleted.length;\n    },\n    setFilter: filter => {\n      this.setState({\n        filter\n      });\n    },\n    setCaseFilter: item => {\n      switch (this.state.filter) {\n        case 'All':\n          return true;\n\n        case 'ToDo':\n          return !item.checked;\n\n        case 'Completed':\n          return item.checked;\n      }\n    },\n    add: (state = initialState, {\n      payload\n    }) => {\n      // todo implement function for add new todo into list\n      const todo = {\n        id: Math.random().toFixed(3),\n        checked: false\n      };\n      let text = state.value;\n      return { ...state,\n        todos: [{ ...todo,\n          text\n        }, ...state.todos]\n      };\n    },\n    remove: (state = initialState, {\n      payload\n    }) => {\n      // todo implement function for remove todo from the list\n      const id = payload;\n      const newTodos = state.todos.filter(item => item.id !== id);\n      return { ...state,\n        todos: newTodos\n      };\n    },\n    markAsChecked: (state = initialState, {\n      payload\n    }) => {\n      // todo implement function for mark task checked by id\n      const id = payload;\n      const todoIndex = state.todos.find(item => item.id === id);\n\n      if (todoIndex) {\n        todoIndex.checked = !todoIndex.checked;\n      }\n    },\n    clearCompleted: state => {\n      //todo implement funciton for remove all completed (checked ) tasks\n      const completed = state.todos.filter(item => !item.checked);\n      return {\n        todos: completed\n      };\n    },\n    checkAll: state => {\n      const checkAll = state.todos.every(item => item.checked);\n      const unCheckAll = state.todos.every(item => !item.checked);\n      let completeTodos;\n\n      const mapAllTodos = checkStatus => {\n        completeTodos = state.todos.map(item => {\n          item.checked = checkStatus ? !item.checked : true;\n          return item;\n        });\n      };\n\n      if (checkAll || unCheckAll) {\n        mapAllTodos(true);\n      } else {\n        mapAllTodos(false);\n      }\n\n      return {\n        todos: completeTodos\n      };\n    }\n  }\n});\nexport const actions = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["/home/user/work/react-redux-todo/todoList/src/app/Containers/TodoList/todoSlice.js"],"names":["createSlice","initialState","todos","filter","item","id","value","todoSlice","name","reducers","handleChange","state","payload","numOfCompleeted","completed","checked","length","numOfNotCompleeted","notCompleted","tate","setFilter","setState","setCaseFilter","add","todo","Math","random","toFixed","text","remove","newTodos","markAsChecked","todoIndex","find","clearCompleted","checkAll","every","unCheckAll","completeTodos","mapAllTodos","checkStatus","map","actions","reducer"],"mappings":"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","sourcesContent":["/* eslint-disable default-case */\nimport { createSlice } from '@reduxjs/toolkit';\n\n\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: [],\n  filter: 'All',\n  item: '',\n  id: 0,\n  value: '',\n};\n\n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n\n    // test: (state, data) => {\n\n    //   return {\n    //     ...state,\n    //     count: state.count,\n    //     templ: state.templ\n    //   };\n    // },\n    // /**\n    //  * text: string;\n    //  */\n    handleChange: (state = initialState, {payload}) => {\n      \n      return {\n        ...state,\n        value: payload\n      };\n    },\n\n    numOfCompleeted: (state = initialState, {payload}) => {\n      const completed = this.state.todos.filter(item => item.checked);\n      return completed.length;\n    },\n    \n    numOfNotCompleeted: (state = initialState, {payload}) => {\n      const notCompleted = this.tate.todos.filter(item => item.checked === false);\n      return notCompleted.length;\n    },\n    \n    setFilter: (filter) => {\n      this.setState({filter})\n    },\n    \n    setCaseFilter: (item) => {\n      switch(this.state.filter) {\n    \n        case 'All':\n          return true;\n    \n        case 'ToDo':\n          return !item.checked;\n          \n        case 'Completed':\n          return item.checked;  \n      }\n    },\n\n    add: (state = initialState, {payload}) => {  // todo implement function for add new todo into list\n        const todo = {\n         id: (Math.random()).toFixed(3),\n         checked: false \n        }\n        let text = state.value;\n\n      return {\n        ...state,\n        todos: [{...todo, text}, ...state.todos]\n      };\n    },\n\n    remove: (state = initialState, {payload}) => {  // todo implement function for remove todo from the list\n\n      const id = payload;\n      const newTodos =  state.todos.filter(item => item.id !== id);\n      \n        return {\n          ...state,\n          todos: newTodos\n        };\n    },\n\n    markAsChecked: (state = initialState, {payload}) => {  // todo implement function for mark task checked by id\n\n      const id = payload;\n      const todoIndex = state.todos.find(item => item.id === id);\n\n      if (todoIndex) {\n        todoIndex.checked = !todoIndex.checked;\n      }\n    },\n\n    clearCompleted: state => {  //todo implement funciton for remove all completed (checked ) tasks\n       const completed = state.todos.filter(item => !item.checked);\n      \n        return {\n          todos: completed\n        };    \n    },\n\n    checkAll: state => {\n        const checkAll = state.todos.every(item => item.checked);\n        const unCheckAll = state.todos.every(item => !item.checked);\n      \n        let completeTodos;\n      \n        const mapAllTodos = (checkStatus) => {\n          completeTodos = state.todos.map(item => {\n            item.checked = checkStatus ? !item.checked : true;\n            return item;\n           });\n          }\n      \n        if (checkAll || unCheckAll) {\n           mapAllTodos(true);\n         } else {\n           mapAllTodos(false);\n        }\n      \n        return {\n          todos: completeTodos\n        }; \n    }\n  }  \n});\n\n\nexport const actions = todoSlice.actions;\n\n\nexport default todoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}