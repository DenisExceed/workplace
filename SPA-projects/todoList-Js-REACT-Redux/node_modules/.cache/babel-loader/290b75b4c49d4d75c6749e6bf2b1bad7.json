{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: [],\n  filter: 'All',\n  item: ''\n};\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    // test: (state, data) => {\n    //   return {\n    //     ...state,\n    //     count: state.count,\n    //     templ: state.templ\n    //   };\n    // },\n    // /**\n    //  * text: string;\n    //  */\n    add: (state = initialState, action) => {\n      // todo implement function for add new todo into list\n      const todo = {\n        checked: false,\n        id: Math.random().toFixed(2)\n      };\n      return { ...state,\n        todos: [{ ...todo,\n          text\n        }, ...this.state.todos]\n      };\n    }\n  },\n  remove: (state, action) => {\n    // todo implement function for remove todo from the list\n    const newTodos = this.state.todos.filter(item => item.id !== action.payload);\n    return { ...state,\n      todos: newTodos\n    };\n  },\n  markAsChecked: (state, action) => {\n    // todo implement function for mark task checked by id\n    const todoIndex = this.state.todos.findIndex(item => item.id === action.payload);\n    const todo = this.state.todos;\n    todo[todoIndex].checked = !todo[todoIndex].checked;\n    return {\n      todos: [...state.todos]\n    };\n  },\n  clearCompleted: state => {\n    //todo implement funciton for remove all completed (checked ) tasks\n    const completed = this.state.todos.filter(item => !item.checked);\n    return {\n      todos: completed\n    };\n  },\n  checkAll: state => {\n    const checkAll = this.state.todos.every(item => item.checked);\n    const unCheckAll = this.state.todos.every(item => !item.checked);\n    let completeTodos;\n\n    const mapAllTodos = checkStatus => {\n      completeTodos = this.state.todos.map(item => {\n        item.checked = checkStatus ? !item.checked : true;\n        return item;\n      });\n    };\n\n    if (checkAll || unCheckAll) {\n      mapAllTodos(true);\n    } else {\n      mapAllTodos(false);\n    }\n\n    return {\n      todos: completeTodos\n    };\n  }\n});\nexport const actions = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["/home/user/work/react-redux-todo/todoList/src/app/Containers/TodoList/todoSlice.js"],"names":["createSlice","initialState","todos","filter","item","todoSlice","name","reducers","add","state","action","todo","checked","id","Math","random","toFixed","text","remove","newTodos","payload","markAsChecked","todoIndex","findIndex","clearCompleted","completed","checkAll","every","unCheckAll","completeTodos","mapAllTodos","checkStatus","map","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\n\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: [],\n  filter: 'All',\n  item: ''\n};\n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n\n    // test: (state, data) => {\n\n    //   return {\n    //     ...state,\n    //     count: state.count,\n    //     templ: state.templ\n    //   };\n    // },\n    // /**\n    //  * text: string;\n    //  */\n    add: (state = initialState, action) => {  // todo implement function for add new todo into list\n      const todo = {\n        checked: false,\n        id: (Math.random()).toFixed(2)\n        }\n        return {\n          ...state,\n          todos: [{...todo, text}, ...this.state.todos]\n        };\n      }\n    },\n\n    remove: (state, action) => {  // todo implement function for remove todo from the list\n\n        const newTodos =  this.state.todos.filter(item => item.id !== action.payload);\n      \n        return {\n          ...state,\n          todos: newTodos\n        };\n    },\n\n    markAsChecked: (state, action) => {  // todo implement function for mark task checked by id\n\n        const todoIndex = this.state.todos.findIndex(item => item.id === action.payload)\n        const todo = this.state.todos;\n        \n        todo[todoIndex].checked = !todo[todoIndex].checked;\n      \n        return {\n          todos: [...state.todos]\n        };\n    },\n\n    clearCompleted: state => {  //todo implement funciton for remove all completed (checked ) tasks\n        const completed = this.state.todos.filter(item => !item.checked);\n      \n        return {\n          todos: completed\n        };    \n    },\n\n    checkAll: state => {\n        const checkAll = this.state.todos.every(item => item.checked);\n        const unCheckAll = this.state.todos.every(item => !item.checked);\n      \n        let completeTodos;\n      \n        const mapAllTodos = (checkStatus) => {\n          completeTodos = this.state.todos.map(item => {\n            item.checked = checkStatus ? !item.checked : true;\n            return item;\n           });\n          }\n      \n        if (checkAll || unCheckAll) {\n           mapAllTodos(true);\n         } else {\n           mapAllTodos(false);\n        }\n      \n        return {\n          todos: completeTodos\n        }; \n    }\n});\n\n\nexport const actions = todoSlice.actions;\n\n\nexport default todoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}