{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { SHOW_ALL, SHOW_COMPLETED, SHOW_ACTIVE, ADD, DELETE, MARK_AS_CHECKED, CLEAR_COMPLETED, CHECK_ALL } from '../../constants/todo';\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: [],\n  filter: 'All',\n  id: 0,\n  count: 0\n};\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    test: (state, data) => {\n      return { ...state,\n        count: state.count + 1\n      };\n    },\n\n    /**\n     * text: string;\n     */\n    add: (state = initialState, text) => {\n      // todo implement function for add new todo into list\n      return { ...state,\n        todos: [...state.todos, {\n          text,\n          checked: false,\n          id: Math.random().toFixed(3)\n        }]\n      };\n    }\n  },\n  remove: (state = initialState, {\n    payload\n  }) => {\n    // todo implement function for remove todo from the list\n    const newTodos = this.state.todos.filter(item => item.id !== item.ADDid);\n    return { ...state,\n      todos: newTodos\n    };\n  },\n  markAsChecked: (state = initialState, {\n    payload\n  }) => {\n    // todo implement function for mark task checked by id\n    const todoIndex = this.state.todos.findIndex(item => item.id === id);\n    const todo = this.state.todos;\n    todo[todoIndex].checked = !todo[todoIndex].checked;\n    return {\n      todos: [...state.todos]\n    };\n  },\n  clearCompleted: state => {\n    //todo implement funciton for remove all completed (checked ) tasks\n    const completed = this.state.todos.filter(item => !item.checked);\n    return {\n      todos: completed\n    };\n  },\n  checkAll: state => {\n    const checkAll = this.state.todos.every(item => item.checked);\n    const unCheckAll = this.state.todos.every(item => !item.checked);\n    let completeTodos;\n\n    const mapAllTodos = checkStatus => {\n      completeTodos = this.state.todos.map(item => {\n        item.checked = checkStatus ? !item.checked : true;\n        return item;\n      });\n    };\n\n    if (checkAll || unCheckAll) {\n      mapAllTodos(true);\n    } else {\n      mapAllTodos(false);\n    }\n\n    return {\n      todos: completeTodos\n    };\n  }\n});\nexport const actions = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["/home/user/work/react-redux-todo/todoList/src/app/Containers/TodoList/todoSlice.js"],"names":["createSlice","SHOW_ALL","SHOW_COMPLETED","SHOW_ACTIVE","ADD","DELETE","MARK_AS_CHECKED","CLEAR_COMPLETED","CHECK_ALL","initialState","todos","filter","id","count","todoSlice","name","reducers","test","state","data","add","text","checked","Math","random","toFixed","remove","payload","newTodos","item","ADDid","markAsChecked","todoIndex","findIndex","todo","clearCompleted","completed","checkAll","every","unCheckAll","completeTodos","mapAllTodos","checkStatus","map","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nimport {\n  SHOW_ALL,\n  SHOW_COMPLETED,\n  SHOW_ACTIVE,\n  ADD,\n  DELETE,\n  MARK_AS_CHECKED,\n  CLEAR_COMPLETED,\n  CHECK_ALL\n} from '../../constants/todo'\n\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: [],\n  filter: 'All',\n  id: 0,\n  count: 0,\n};\n\n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n\n    test: (state, data) => {\n      return {\n        ...state,\n        count: state.count + 1\n      };\n    },\n    /**\n     * text: string;\n     */\n    add: (state = initialState, text) => {  // todo implement function for add new todo into list\n\n        return {\n          ...state,\n          todos: [...state.todos, {\n            text,\n            checked: false,\n            id: (Math.random()).toFixed(3),\n          }]\n        };\n      }\n    },\n\n    remove: (state = initialState, {payload}) => {  // todo implement function for remove todo from the list\n\n        const newTodos =  this.state.todos.filter(item => item.id !== item.ADDid);\n      \n        return {\n          ...state,\n          todos: newTodos\n        };\n    },\n\n    markAsChecked: (state = initialState, {payload}) => {  // todo implement function for mark task checked by id\n\n        const todoIndex = this.state.todos.findIndex(item => item.id === id)\n        const todo = this.state.todos;\n        \n        todo[todoIndex].checked = !todo[todoIndex].checked;\n      \n        return {\n          todos: [...state.todos]\n        };\n    },\n\n    clearCompleted: state => {  //todo implement funciton for remove all completed (checked ) tasks\n        const completed = this.state.todos.filter(item => !item.checked);\n      \n        return {\n          todos: completed\n        };    \n    },\n\n    checkAll: state => {\n        const checkAll = this.state.todos.every(item => item.checked);\n        const unCheckAll = this.state.todos.every(item => !item.checked);\n      \n        let completeTodos;\n      \n        const mapAllTodos = (checkStatus) => {\n          completeTodos = this.state.todos.map(item => {\n            item.checked = checkStatus ? !item.checked : true;\n            return item;\n           });\n          }\n      \n        if (checkAll || unCheckAll) {\n           mapAllTodos(true);\n         } else {\n           mapAllTodos(false);\n        }\n      \n        return {\n          todos: completeTodos\n        }; \n    }\n});\n\n\nexport const actions = todoSlice.actions;\n\n\nexport default todoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}