{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { SHOW_ALL, SHOW_COMPLETED, SHOW_ACTIVE, ADD, DELETE, MARK_AS_CHECKED, CLEAR_COMPLETED, CHECK_ALL } from '../../constants/todo';\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: [],\n  filter: 'All',\n  count: 0\n};\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    test: (state, data) => {\n      return { ...state,\n        count: state.count + 1\n      };\n    },\n\n    /**\n     * text: string;\n     */\n    add: (state = initialState, text) => {\n      // todo implement function for add new todo into list\n      let createTodoItem = text => {\n        const todo = {\n          checked: false,\n          id: Math.random().toFixed(3)\n        };\n        this.setState({\n          todos: [{ ...todo,\n            text\n          }, ...this.state.todos]\n        });\n        return { ...state,\n          todos: [...state.todos, {\n            chec\n          }]\n        };\n      };\n    },\n    remove: (state = initialState, {\n      payload\n    }) => {\n      // todo implement function for remove todo from the list\n      let deleteTodo = id => {\n        const newTodos = this.state.todos.filter(item => item.id !== id);\n        this.setState({\n          todos: newTodos\n        });\n      };\n    },\n    markAsChecked: (state = initialState, {\n      payload\n    }) => {\n      // todo implement function for mark task checked by id\n      let completeTodo = id => {\n        const todoIndex = this.state.todos.findIndex(item => item.id === id);\n        const todo = this.state.todos;\n        todo[todoIndex].checked = !todo[todoIndex].checked;\n        this.setState({\n          todos: [...this.state.todos]\n        });\n      };\n    },\n    clearCompleted: state => {\n      //todo implement funciton for remove all completed (checked ) tasks\n      let deleteCompletedTodos = () => {\n        const completed = this.state.todos.filter(item => !item.checked);\n        this.setState({\n          todos: completed\n        });\n      };\n    },\n    checkAll: state => {\n      let completeAllTodos = () => {\n        const checkAll = this.state.todos.every(item => item.checked);\n        const unCheckAll = this.state.todos.every(item => !item.checked);\n        let completeTodos;\n\n        const mapAllTodos = checkStatus => {\n          completeTodos = this.state.todos.map(item => {\n            item.checked = checkStatus ? !item.checked : true;\n            return item;\n          });\n        };\n\n        if (checkAll || unCheckAll) {\n          mapAllTodos(true);\n        } else {\n          mapAllTodos(false);\n        }\n\n        this.setState({\n          todos: completeTodos\n        });\n      };\n    }\n  }\n});\nexport const actions = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["/home/user/work/react-redux-todo/todoList/src/app/Containers/TodoList/todoSlice.js"],"names":["createSlice","SHOW_ALL","SHOW_COMPLETED","SHOW_ACTIVE","ADD","DELETE","MARK_AS_CHECKED","CLEAR_COMPLETED","CHECK_ALL","initialState","todos","filter","count","todoSlice","name","reducers","test","state","data","add","text","createTodoItem","todo","checked","id","Math","random","toFixed","setState","chec","remove","payload","deleteTodo","newTodos","item","markAsChecked","completeTodo","todoIndex","findIndex","clearCompleted","deleteCompletedTodos","completed","checkAll","completeAllTodos","every","unCheckAll","completeTodos","mapAllTodos","checkStatus","map","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nimport {\n  SHOW_ALL,\n  SHOW_COMPLETED,\n  SHOW_ACTIVE,\n  ADD,\n  DELETE,\n  MARK_AS_CHECKED,\n  CLEAR_COMPLETED,\n  CHECK_ALL\n} from '../../constants/todo'\n\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: [],\n  filter: 'All',\n  count: 0,\n};\n\n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n\n    test: (state, data) => {\n      return {\n        ...state,\n        count: state.count + 1\n      };\n    },\n    /**\n     * text: string;\n     */\n    add: (state = initialState, text) => {  // todo implement function for add new todo into list\n      let createTodoItem = (text) => {\n        const todo = {\n         checked: false,\n         id: (Math.random()).toFixed(3), \n        }\n    \n        this.setState ({\n         todos: [{...todo, text}, ...this.state.todos]\n        });\n\n        return {\n          ...state,\n          todos: [...state.todos, {\n            chec\n          }]\n        }\n      }\n    },\n    remove: (state = initialState, {payload}) => {  // todo implement function for remove todo from the list\n      let deleteTodo = (id) => {\n        const newTodos =  this.state.todos.filter(item => item.id !== id);\n      \n        this.setState({\n          todos: newTodos\n        });\n      }\n    },\n    markAsChecked: (state = initialState, {payload}) => {  // todo implement function for mark task checked by id\n      let completeTodo = (id) => {\n        const todoIndex = this.state.todos.findIndex(item => item.id === id)\n        const todo = this.state.todos;\n        \n        todo[todoIndex].checked = !todo[todoIndex].checked;\n      \n        this.setState({\n          todos: [...this.state.todos]\n        });\n      }\n    },\n    clearCompleted: state => {  //todo implement funciton for remove all completed (checked ) tasks\n      let deleteCompletedTodos = () => {\n        const completed = this.state.todos.filter(item => !item.checked);\n      \n        this.setState({\n          todos: completed\n        });\n      }\n    },\n    checkAll: state => {\n      let completeAllTodos = () => {\n        const checkAll = this.state.todos.every(item => item.checked);\n        const unCheckAll = this.state.todos.every(item => !item.checked);\n      \n        let completeTodos;\n      \n        const mapAllTodos = (checkStatus) => {\n          completeTodos = this.state.todos.map(item => {\n            item.checked = checkStatus ? !item.checked : true;\n            return item;\n           });\n          }\n      \n          if (checkAll || unCheckAll) {\n            mapAllTodos(true);\n          } else {\n            mapAllTodos(false);\n          }\n      \n          this.setState({\n            todos: completeTodos\n          }); \n      }\n    }\n  },\n});\n\n\nexport const actions = todoSlice.actions;\n\n\nexport default todoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}