{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { SHOW_ALL, SHOW_COMPLETED, SHOW_ACTIVE, ADD, DELETE, MARK_AS_CHECKED, CLEAR_COMPLETED, CHECK_ALL } from '../../constants/todo';\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: [],\n  filter: 'All',\n  count: 0\n};\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    test: (state, data) => {\n      return { ...state,\n        count: state.count + 1,\n        templ: ''\n      };\n    },\n    // /**\n    //  * text: string;\n    //  */\n    add: (state, action) => {\n      // todo implement function for add new todo into list\n      this.state.push(action.payload);\n      return { ...state,\n        todos: [...state.todos]\n      };\n    }\n  },\n  remove: (state, action) => {\n    // todo implement function for remove todo from the list\n    const newTodos = this.state.todos.filter(item => item.id !== action.payload);\n    return { ...state,\n      todos: newTodos\n    };\n  },\n  markAsChecked: (state, action) => {\n    // todo implement function for mark task checked by id\n    const todoIndex = this.state.todos.findIndex(item => item.id === action.payload);\n    const todo = this.state.todos;\n    todo[todoIndex].checked = !todo[todoIndex].checked;\n    return {\n      todos: [...state.todos]\n    };\n  },\n  clearCompleted: state => {\n    //todo implement funciton for remove all completed (checked ) tasks\n    const completed = this.state.todos.filter(item => !item.checked);\n    return {\n      todos: completed\n    };\n  },\n  checkAll: state => {\n    const checkAll = this.state.todos.every(item => item.checked);\n    const unCheckAll = this.state.todos.every(item => !item.checked);\n    let completeTodos;\n\n    const mapAllTodos = checkStatus => {\n      completeTodos = this.state.todos.map(item => {\n        item.checked = checkStatus ? !item.checked : true;\n        return item;\n      });\n    };\n\n    if (checkAll || unCheckAll) {\n      mapAllTodos(true);\n    } else {\n      mapAllTodos(false);\n    }\n\n    return {\n      todos: completeTodos\n    };\n  }\n});\nexport const actions = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["/home/user/work/react-redux-todo/todoList/src/app/Containers/TodoList/todoSlice.js"],"names":["createSlice","SHOW_ALL","SHOW_COMPLETED","SHOW_ACTIVE","ADD","DELETE","MARK_AS_CHECKED","CLEAR_COMPLETED","CHECK_ALL","initialState","todos","filter","count","todoSlice","name","reducers","test","state","data","templ","add","action","push","payload","remove","newTodos","item","id","markAsChecked","todoIndex","findIndex","todo","checked","clearCompleted","completed","checkAll","every","unCheckAll","completeTodos","mapAllTodos","checkStatus","map","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nimport {\n  SHOW_ALL,\n  SHOW_COMPLETED,\n  SHOW_ACTIVE,\n  ADD,\n  DELETE,\n  MARK_AS_CHECKED,\n  CLEAR_COMPLETED,\n  CHECK_ALL\n} from '../../constants/todo'\n\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: [],\n  filter: 'All',\n  count: 0\n};\n\n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n\n    test: (state, data) => {\n      return {\n        ...state,\n        count: state.count + 1,\n        templ: ''\n      };\n    },\n    // /**\n    //  * text: string;\n    //  */\n    add: (state, action) => {  // todo implement function for add new todo into list\n        this.state.push(action.payload)\n        return {\n          ...state,\n          todos: [...state.todos]\n        };\n      }\n    },\n\n    remove: (state, action) => {  // todo implement function for remove todo from the list\n\n        const newTodos =  this.state.todos.filter(item => item.id !== action.payload);\n      \n        return {\n          ...state,\n          todos: newTodos\n        };\n    },\n\n    markAsChecked: (state, action) => {  // todo implement function for mark task checked by id\n\n        const todoIndex = this.state.todos.findIndex(item => item.id === action.payload)\n        const todo = this.state.todos;\n        \n        todo[todoIndex].checked = !todo[todoIndex].checked;\n      \n        return {\n          todos: [...state.todos]\n        };\n    },\n\n    clearCompleted: state => {  //todo implement funciton for remove all completed (checked ) tasks\n        const completed = this.state.todos.filter(item => !item.checked);\n      \n        return {\n          todos: completed\n        };    \n    },\n\n    checkAll: state => {\n        const checkAll = this.state.todos.every(item => item.checked);\n        const unCheckAll = this.state.todos.every(item => !item.checked);\n      \n        let completeTodos;\n      \n        const mapAllTodos = (checkStatus) => {\n          completeTodos = this.state.todos.map(item => {\n            item.checked = checkStatus ? !item.checked : true;\n            return item;\n           });\n          }\n      \n        if (checkAll || unCheckAll) {\n           mapAllTodos(true);\n         } else {\n           mapAllTodos(false);\n        }\n      \n        return {\n          todos: completeTodos\n        }; \n    }\n});\n\n\nexport const actions = todoSlice.actions;\n\n\nexport default todoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}