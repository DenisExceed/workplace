{"ast":null,"code":"/* eslint-disable default-case */\nimport { Subscriptions } from '@material-ui/icons';\nimport { createSlice } from '@reduxjs/toolkit';\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: [],\n  item: '',\n  id: 0,\n  value: '',\n  checked: false,\n  status: 'All'\n};\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  hydrate: (state, action) => {\n    // do not do state = action.payload it will not update the store\n    return action.payload;\n  },\n  reducers: {\n    handleChange: (state = initialState, {\n      payload\n    }) => {\n      return { ...state,\n        value: payload\n      };\n    },\n    add: (state = initialState, {\n      payload\n    }) => {\n      // todo implement function for add new todo into list\n      const todo = {\n        id: Math.random().toFixed(3),\n        checked: false\n      };\n      let text = state.value;\n      const newTodos = [{ ...todo,\n        text\n      }, ...state.todos];\n      localStorage.setItem('todos', JSON.stringify(newTodos));\n      return { ...state,\n        todos: newTodos\n      };\n    },\n    remove: (state = initialState, {\n      payload\n    }) => {\n      // todo implement function for remove todo from the list\n      const id = payload;\n      const newTodos = state.todos.filter(item => item.id !== id);\n      localStorage.setItem('todos', JSON.stringify(newTodos));\n      return { ...state,\n        todos: newTodos\n      };\n    },\n    markAsChecked: (state = initialState, {\n      payload\n    }) => {\n      // todo implement function for mark task checked by id\n      const id = payload;\n      const todos = [...state.todos].map(({ ...item\n      }) => {\n        if (item.id === id) {\n          item.checked = !item.checked;\n        }\n\n        return item;\n      });\n      localStorage.setItem('todos', JSON.stringify(todos));\n      return { ...state,\n        todos: todos\n      };\n    },\n    clearCompleted: state => {\n      //todo implement funciton for remove all completed (checked ) tasks\n      const completed = state.todos.filter(item => !item.checked);\n      localStorage.setItem('todos', JSON.stringify(completed));\n      return { ...state,\n        todos: completed\n      };\n    },\n    checkAll: state => {\n      const status = state.todos.some(item => item.checked);\n\n      const mapAllTodos = checkStatus => {\n        console.log('checkStatus', checkStatus);\n        return [...state.todos].map(({ ...item\n        }) => {\n          item.checked = checkStatus;\n          return item;\n        });\n      };\n\n      const todos = mapAllTodos(!status);\n      localStorage.setItem('todos', JSON.stringify(completed));\n      return { ...state,\n        todos: todos\n      };\n    },\n    All: state => {\n      return { ...state,\n        status: 'All'\n      };\n    },\n    ToDo: state => {\n      return { ...state,\n        status: 'Todo'\n      };\n    },\n    Completed: state => {\n      return { ...state,\n        status: 'Completed'\n      };\n    }\n  }\n});\nexport const actions = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["/home/user/work/react-redux-todo/todoList/src/app/Containers/TodoList/todoSlice.js"],"names":["Subscriptions","createSlice","initialState","todos","item","id","value","checked","status","todoSlice","name","hydrate","state","action","payload","reducers","handleChange","add","todo","Math","random","toFixed","text","newTodos","localStorage","setItem","JSON","stringify","remove","filter","markAsChecked","map","clearCompleted","completed","checkAll","some","mapAllTodos","checkStatus","console","log","All","ToDo","Completed","actions","reducer"],"mappings":"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","sourcesContent":["/* eslint-disable default-case */\nimport { Subscriptions } from '@material-ui/icons';\nimport { createSlice } from '@reduxjs/toolkit';\n\n\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: [],\n  item: '',\n  id: 0,\n  value: '',\n  checked: false,\n  status: 'All',\n};\n\n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  hydrate:(state, action) => {\n    // do not do state = action.payload it will not update the store\n    return action.payload\n  },\n  reducers: {\n\n    handleChange: (state = initialState, {payload}) => {\n      \n      return {\n        ...state,\n        value: payload\n      };\n    },\n\n\n    add: (state = initialState, {payload}) => {  // todo implement function for add new todo into list\n        const todo = {\n         id: (Math.random()).toFixed(3),\n         checked: false \n        }\n        let text = state.value;\n\n\n        const newTodos = [{...todo, text}, ...state.todos];\n\n\n        localStorage.setItem('todos', JSON.stringify(newTodos));\n\n      return {\n        ...state,\n        todos: newTodos,\n      };\n    },\n\n    remove: (state = initialState, {payload}) => {  // todo implement function for remove todo from the list\n\n      const id = payload;\n      const newTodos =  state.todos.filter(item => item.id !== id);\n\n\n\n      localStorage.setItem('todos', JSON.stringify(newTodos));\n      \n        return {\n          ...state,\n          todos: newTodos,\n        };\n    },\n\n    markAsChecked: (state = initialState, {payload}) => {  // todo implement function for mark task checked by id\n\n      const id = payload;\n      const todos = [...state.todos].map(({...item}) => {\n        if (item.id === id) {\n          item.checked = !item.checked;\n        }\n\n        return item\n      });\n\n\n\n      localStorage.setItem('todos', JSON.stringify(todos));\n\n      return {\n        ...state,\n        todos: todos,\n      }\n\n    },\n\n    clearCompleted: (state) => {  //todo implement funciton for remove all completed (checked ) tasks\n       const completed = state.todos.filter(item => !item.checked);\n\n       localStorage.setItem('todos', JSON.stringify(completed));\n      \n        return {\n          ...state,\n          todos: completed,\n        };    \n    },\n\n    checkAll: (state) => {\n\n        const status = state.todos.some(item => item.checked);\n          \n        const mapAllTodos = (checkStatus) => {\n          console.log('checkStatus', checkStatus)\n          return [...state.todos].map(({...item}) => { \n            item.checked = checkStatus;\n            return item;\n          });\n        }\n\n        const todos = mapAllTodos(!status);\n\n        localStorage.setItem('todos', JSON.stringify(completed));\n\n        return {\n          ...state,\n          todos: todos,\n        };  \n    },\n\n    All: (state) => {\n      return {\n        ...state,\n        status: 'All',\n      };\n    },\n    \n    ToDo: (state) => {\n      return {\n        ...state,\n        status: 'Todo',\n      }; \n    },\n\n    Completed: (state) => {\n      return {\n        ...state,\n        status: 'Completed',\n      };\n    }\n\n  }  \n});\n\n\nexport const actions = todoSlice.actions;\n\n\nexport default todoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}