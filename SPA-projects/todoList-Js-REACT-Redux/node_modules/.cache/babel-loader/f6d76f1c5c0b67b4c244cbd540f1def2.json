{"ast":null,"code":"/* eslint-disable default-case */\nimport { Subscriptions } from '@material-ui/icons';\nimport { createSlice } from '@reduxjs/toolkit';\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: JSON.parse(localStorage.getItem('todos') || []),\n  item: '',\n  id: 0,\n  value: '',\n  status: 'All'\n};\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    handleChange: (state = initialState, {\n      payload\n    }) => {\n      return { ...state,\n        value: payload\n      };\n    },\n    add: (state = initialState, {\n      payload\n    }) => {\n      // todo implement function for add new todo into list\n      if (!state.value.length || state.value) {\n        return state;\n      }\n\n      const todo = {\n        id: Math.random().toFixed(3),\n        checked: false\n      };\n      let text = state.value;\n      const newTodos = [{ ...todo,\n        text\n      }, ...state.todos];\n      localStorage.setItem('todos', JSON.stringify(newTodos));\n      return { ...state,\n        todos: newTodos\n      };\n    },\n    remove: (state = initialState, {\n      payload\n    }) => {\n      // todo implement function for remove todo from the list\n      const id = payload;\n      const newTodos = state.todos.filter(item => item.id !== id);\n      localStorage.setItem('todos', JSON.stringify(newTodos));\n      return { ...state,\n        todos: newTodos\n      };\n    },\n    markAsChecked: (state = initialState, {\n      payload\n    }) => {\n      // todo implement function for mark task checked by id\n      const id = payload;\n      const todos = [...state.todos].map(({ ...item\n      }) => {\n        if (item.id === id) {\n          item.checked = !item.checked;\n        }\n\n        return item;\n      });\n      localStorage.setItem('todos', JSON.stringify(todos));\n      return { ...state,\n        todos: todos\n      };\n    },\n    clearCompleted: state => {\n      //todo implement funciton for remove all completed (checked ) tasks\n      const completed = state.todos.filter(item => !item.checked);\n      localStorage.setItem('todos', JSON.stringify(completed));\n      return { ...state,\n        todos: completed\n      };\n    },\n    checkAll: state => {\n      const status = state.todos.some(item => item.checked);\n\n      const mapAllTodos = checkStatus => {\n        return [...state.todos].map(({ ...item\n        }) => {\n          item.checked = checkStatus;\n          return item;\n        });\n      };\n\n      const todos = mapAllTodos(!status);\n      localStorage.setItem('todos', JSON.stringify(todos));\n      return { ...state,\n        todos: todos\n      };\n    },\n    All: state => {\n      return { ...state,\n        status: 'All'\n      };\n    },\n    ToDo: state => {\n      return { ...state,\n        status: 'Todo'\n      };\n    },\n    Completed: state => {\n      return { ...state,\n        status: 'Completed'\n      };\n    }\n  }\n});\nexport const actions = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["/home/user/work/react-redux-todo/todoList/src/app/Containers/TodoList/todoSlice.js"],"names":["Subscriptions","createSlice","initialState","todos","JSON","parse","localStorage","getItem","item","id","value","status","todoSlice","name","reducers","handleChange","state","payload","add","length","todo","Math","random","toFixed","checked","text","newTodos","setItem","stringify","remove","filter","markAsChecked","map","clearCompleted","completed","checkAll","some","mapAllTodos","checkStatus","All","ToDo","Completed","actions","reducer"],"mappings":"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","sourcesContent":["/* eslint-disable default-case */\nimport { Subscriptions } from '@material-ui/icons';\nimport { createSlice } from '@reduxjs/toolkit';\n\n\nexport const initialState = {\n  // tasks: [],  // task should have a format {id: unique_value, text: taks_text, checked: flag_show_if_task_completed (false by default) }\n  todos: JSON.parse(localStorage.getItem('todos') || []),\n  item: '',\n  id: 0,\n  value: '',\n  status: 'All',\n};\n\n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n\n    handleChange: (state = initialState, {payload}) => {\n\n \n     \n\n      return {\n        ...state,\n        value: payload\n      };\n    },\n\n\n    add: (state = initialState, {payload}) => {  // todo implement function for add new todo into list\n\n      if (!state.value.length || state.value) { return state }\n         const todo = {\n         id: (Math.random()).toFixed(3),\n         checked: false \n        }\n        let text = state.value;\n\n\n        const newTodos = [{...todo, text}, ...state.todos];\n\n\n        localStorage.setItem('todos', JSON.stringify(newTodos));\n\n      return {\n        ...state,\n        todos: newTodos,\n      };\n    },\n\n    remove: (state = initialState, {payload}) => {  // todo implement function for remove todo from the list\n\n      const id = payload;\n      const newTodos =  state.todos.filter(item => item.id !== id);\n\n\n\n      localStorage.setItem('todos', JSON.stringify(newTodos));\n      \n        return {\n          ...state,\n          todos: newTodos,\n        };\n    },\n\n    markAsChecked: (state = initialState, {payload}) => {  // todo implement function for mark task checked by id\n\n      const id = payload;\n      const todos = [...state.todos].map(({...item}) => {\n        if (item.id === id) {\n          item.checked = !item.checked;\n        }\n\n        return item\n      });\n\n      localStorage.setItem('todos', JSON.stringify(todos));\n\n      return {\n        ...state,\n        todos: todos,\n      }\n\n    },\n\n    clearCompleted: (state) => {  //todo implement funciton for remove all completed (checked ) tasks\n       const completed = state.todos.filter(item => !item.checked);\n\n       localStorage.setItem('todos', JSON.stringify(completed));\n      \n        return {\n          ...state,\n          todos: completed,\n        };    \n    },\n\n    checkAll: (state) => {\n\n        const status = state.todos.some(item => item.checked);\n          \n        const mapAllTodos = (checkStatus) => {\n\n          return [...state.todos].map(({...item}) => { \n            item.checked = checkStatus;\n            return item;\n          });\n        }\n\n        const todos = mapAllTodos(!status);\n\n        localStorage.setItem('todos', JSON.stringify(todos));\n\n        return {\n          ...state,\n          todos: todos,\n        };  \n    },\n\n    All: (state) => {\n      return {\n        ...state,\n        status: 'All',\n      };\n    },\n    \n    ToDo: (state) => {\n      return {\n        ...state,\n        status: 'Todo',\n      }; \n    },\n\n    Completed: (state) => {\n      return {\n        ...state,\n        status: 'Completed',\n      };\n    }\n\n  }  \n});\n\n\nexport const actions = todoSlice.actions;\n\n\nexport default todoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}