{"ast":null,"code":"/* eslint-disable default-case */\n// import { Subscriptions } from '@material-ui/icons';\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    handleChange: (state = initialState, {\n      payload\n    }) => {\n      return { ...state,\n        value: payload\n      };\n    },\n    get: (state = initialState, {\n      payload\n    }) => {\n      return { ...state,\n        todos: payload\n      };\n    },\n    // add: (state = initialState, { payload }) => {\n    //   return state;\n    // //   if (!state.value.length || state.value === '' || state.value.trim() === '') { return state }\n    // //   let text = state.value;\n    // // return {\n    // //   ...state,\n    // //   todos: [...state.todos, newTodo]\n    // // }\n    // },\n    remove: (state = initialState, {\n      payload\n    }) => {\n      // todo implement function for remove todo from the list\n      const id = payload;\n      const newTodos = state.todos.filter(item => item.id !== id);\n      return { ...state,\n        todos: newTodos\n      };\n    },\n    markAsChecked: (state = initialState, {\n      payload\n    }) => {\n      // todo implement function for mark task checked by id\n      const id = payload;\n      const todos = [...state.todos].map(({ ...item\n      }) => {\n        if (item.id === id) {\n          item.checked = !item.checked;\n        }\n\n        return item;\n      });\n      return { ...state,\n        todos: todos\n      };\n    },\n    clearCompleted: state => {\n      //todo implement funciton for remove all completed (checked ) tasks\n      const completed = state.todos.filter(item => !item.checked);\n      localStorage.setItem('todos', JSON.stringify(completed));\n      return { ...state,\n        todos: completed\n      };\n    },\n    checkAll: state => {\n      const status = state.todos.some(item => item.checked);\n\n      const mapAllTodos = checkStatus => {\n        return [...state.todos].map(({ ...item\n        }) => {\n          item.checked = checkStatus;\n          return item;\n        });\n      };\n\n      const todos = mapAllTodos(!status);\n      localStorage.setItem('todos', JSON.stringify(todos));\n      return { ...state,\n        todos: todos\n      };\n    },\n    All: state => {\n      return { ...state,\n        status: 'All'\n      };\n    },\n    ToDo: state => {\n      return { ...state,\n        status: 'Todo'\n      };\n    },\n    Completed: state => {\n      return { ...state,\n        status: 'Completed'\n      };\n    }\n  },\n  extraReducers: builder => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(fetchUserById.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.todos.push(action.payload);\n    });\n  }\n});\nexport const actions = todoSlice.actions;\nexport default todoSlice.reducer;","map":{"version":3,"sources":["/home/user/work/react-redux-todo/todoList/src/app/Containers/TodoList/todoSlice.js"],"names":["createSlice","createAsyncThunk","axios","todoSlice","name","initialState","reducers","handleChange","state","payload","value","get","todos","remove","id","newTodos","filter","item","markAsChecked","map","checked","clearCompleted","completed","localStorage","setItem","JSON","stringify","checkAll","status","some","mapAllTodos","checkStatus","All","ToDo","Completed","extraReducers","builder","addCase","fetchUserById","fulfilled","action","push","actions","reducer"],"mappings":"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","sourcesContent":["/* eslint-disable default-case */\n// import { Subscriptions } from '@material-ui/icons';\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\n\n\n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n\n    handleChange: (state = initialState, { payload }) => {\n\n       return {\n        ...state,\n        value: payload\n      };\n    },\n\n    get: (state = initialState, { payload }) => {\n      return {\n        ...state,\n        todos: payload\n      }\n    },\n\n\n    // add: (state = initialState, { payload }) => {\n\n    //   return state;\n    // //   if (!state.value.length || state.value === '' || state.value.trim() === '') { return state }\n    // //   let text = state.value;\n\n   \n    // // return {\n    // //   ...state,\n    // //   todos: [...state.todos, newTodo]\n    // // }\n\n    // },\n\n    remove: (state = initialState, {payload}) => {  // todo implement function for remove todo from the list\n\n      const id = payload;\n      const newTodos =  state.todos.filter(item => item.id !== id);\n\n      \n        return {\n          ...state,\n          todos: newTodos,\n        };\n    },\n\n    markAsChecked: (state = initialState, {payload}) => {  // todo implement function for mark task checked by id\n\n      const id = payload;\n      const todos = [...state.todos].map(({...item}) => {\n        if (item.id === id) {\n          item.checked = !item.checked;\n        }\n\n        return item\n      });\n\n      return {\n        ...state,\n        todos: todos,\n      }\n\n    },\n\n    clearCompleted: (state) => {  //todo implement funciton for remove all completed (checked ) tasks\n       const completed = state.todos.filter(item => !item.checked);\n\n       localStorage.setItem('todos', JSON.stringify(completed));\n      \n        return {\n          ...state,\n          todos: completed,\n        };    \n    },\n\n    checkAll: (state) => {\n\n        const status = state.todos.some(item => item.checked);\n          \n        const mapAllTodos = (checkStatus) => {\n\n          return [...state.todos].map(({...item}) => { \n            item.checked = checkStatus;\n            return item;\n          });\n        }\n\n        const todos = mapAllTodos(!status);\n\n        localStorage.setItem('todos', JSON.stringify(todos));\n\n        return {\n          ...state,\n          todos: todos,\n        };  \n    },\n\n    All: (state) => {\n      return {\n        ...state,\n        status: 'All',\n      };\n    },\n    \n    ToDo: (state) => {\n      return {\n        ...state,\n        status: 'Todo',\n      }; \n    },\n\n    Completed: (state) => {\n      return {\n        ...state,\n        status: 'Completed',\n      };\n    }\n\n  },\n  extraReducers: (builder) => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(fetchUserById.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.todos.push(action.payload)\n    })\n  },\n});\n\n\nexport const actions = todoSlice.actions;\n\nexport default todoSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}